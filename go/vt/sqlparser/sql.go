// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	constraintDefinition *ConstraintDefinition
	constraintInfo       ConstraintInfo
	ReferenceAction      ReferenceAction
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	optLike              *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const UNLOCK = 57374
const KEYS = 57375
const VALUES = 57376
const LAST_INSERT_ID = 57377
const NEXT = 57378
const VALUE = 57379
const SHARE = 57380
const MODE = 57381
const SQL_NO_CACHE = 57382
const SQL_CACHE = 57383
const JOIN = 57384
const STRAIGHT_JOIN = 57385
const LEFT = 57386
const RIGHT = 57387
const INNER = 57388
const OUTER = 57389
const CROSS = 57390
const NATURAL = 57391
const USE = 57392
const FORCE = 57393
const ON = 57394
const USING = 57395
const ID = 57396
const HEX = 57397
const STRING = 57398
const INTEGRAL = 57399
const FLOAT = 57400
const HEXNUM = 57401
const VALUE_ARG = 57402
const LIST_ARG = 57403
const COMMENT = 57404
const COMMENT_KEYWORD = 57405
const BIT_LITERAL = 57406
const NULL = 57407
const TRUE = 57408
const FALSE = 57409
const OR = 57410
const AND = 57411
const NOT = 57412
const BETWEEN = 57413
const CASE = 57414
const WHEN = 57415
const THEN = 57416
const ELSE = 57417
const END = 57418
const LE = 57419
const GE = 57420
const NE = 57421
const NULL_SAFE_EQUAL = 57422
const IS = 57423
const LIKE = 57424
const REGEXP = 57425
const IN = 57426
const SHIFT_LEFT = 57427
const SHIFT_RIGHT = 57428
const DIV = 57429
const MOD = 57430
const UNARY = 57431
const COLLATE = 57432
const BINARY = 57433
const UNDERSCORE_BINARY = 57434
const UNDERSCORE_UTF8MB4 = 57435
const INTERVAL = 57436
const JSON_EXTRACT_OP = 57437
const JSON_UNQUOTE_EXTRACT_OP = 57438
const CREATE = 57439
const ALTER = 57440
const DROP = 57441
const RENAME = 57442
const ANALYZE = 57443
const ADD = 57444
const SCHEMA = 57445
const TABLE = 57446
const INDEX = 57447
const VIEW = 57448
const TO = 57449
const IGNORE = 57450
const IF = 57451
const UNIQUE = 57452
const PRIMARY = 57453
const COLUMN = 57454
const SPATIAL = 57455
const FULLTEXT = 57456
const KEY_BLOCK_SIZE = 57457
const ACTION = 57458
const CASCADE = 57459
const CONSTRAINT = 57460
const FOREIGN = 57461
const NO = 57462
const REFERENCES = 57463
const RESTRICT = 57464
const SHOW = 57465
const DESCRIBE = 57466
const EXPLAIN = 57467
const DATE = 57468
const ESCAPE = 57469
const REPAIR = 57470
const OPTIMIZE = 57471
const TRUNCATE = 57472
const MAXVALUE = 57473
const PARTITION = 57474
const REORGANIZE = 57475
const LESS = 57476
const THAN = 57477
const PROCEDURE = 57478
const TRIGGER = 57479
const VINDEX = 57480
const VINDEXES = 57481
const STATUS = 57482
const VARIABLES = 57483
const BEGIN = 57484
const START = 57485
const TRANSACTION = 57486
const COMMIT = 57487
const ROLLBACK = 57488
const BIT = 57489
const TINYINT = 57490
const SMALLINT = 57491
const MEDIUMINT = 57492
const INT = 57493
const INTEGER = 57494
const BIGINT = 57495
const INTNUM = 57496
const REAL = 57497
const DOUBLE = 57498
const FLOAT_TYPE = 57499
const DECIMAL = 57500
const NUMERIC = 57501
const TIME = 57502
const TIMESTAMP = 57503
const DATETIME = 57504
const YEAR = 57505
const CHAR = 57506
const VARCHAR = 57507
const BOOL = 57508
const CHARACTER = 57509
const VARBINARY = 57510
const NCHAR = 57511
const TEXT = 57512
const TINYTEXT = 57513
const MEDIUMTEXT = 57514
const LONGTEXT = 57515
const BLOB = 57516
const TINYBLOB = 57517
const MEDIUMBLOB = 57518
const LONGBLOB = 57519
const JSON = 57520
const ENUM = 57521
const GEOMETRY = 57522
const POINT = 57523
const LINESTRING = 57524
const POLYGON = 57525
const GEOMETRYCOLLECTION = 57526
const MULTIPOINT = 57527
const MULTILINESTRING = 57528
const MULTIPOLYGON = 57529
const NULLX = 57530
const AUTO_INCREMENT = 57531
const APPROXNUM = 57532
const SIGNED = 57533
const UNSIGNED = 57534
const ZEROFILL = 57535
const COLLATION = 57536
const DATABASES = 57537
const TABLES = 57538
const VITESS_KEYSPACES = 57539
const VITESS_SHARDS = 57540
const VITESS_TABLETS = 57541
const VSCHEMA_TABLES = 57542
const VITESS_TARGET = 57543
const FULL = 57544
const PROCESSLIST = 57545
const COLUMNS = 57546
const NAMES = 57547
const CHARSET = 57548
const GLOBAL = 57549
const SESSION = 57550
const ISOLATION = 57551
const LEVEL = 57552
const READ = 57553
const WRITE = 57554
const ONLY = 57555
const REPEATABLE = 57556
const COMMITTED = 57557
const UNCOMMITTED = 57558
const SERIALIZABLE = 57559
const CURRENT_TIMESTAMP = 57560
const DATABASE = 57561
const CURRENT_DATE = 57562
const CURRENT_TIME = 57563
const LOCALTIME = 57564
const LOCALTIMESTAMP = 57565
const UTC_DATE = 57566
const UTC_TIME = 57567
const UTC_TIMESTAMP = 57568
const REPLACE = 57569
const CONVERT = 57570
const CAST = 57571
const SUBSTR = 57572
const SUBSTRING = 57573
const GROUP_CONCAT = 57574
const SEPARATOR = 57575
const MATCH = 57576
const AGAINST = 57577
const BOOLEAN = 57578
const LANGUAGE = 57579
const WITH = 57580
const QUERY = 57581
const EXPANSION = 57582
const UNUSED = 57583

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"VITESS_TARGET",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 28,
	-2, 4,
	-1, 36,
	157, 286,
	158, 286,
	-2, 278,
	-1, 253,
	111, 613,
	-2, 609,
	-1, 254,
	111, 614,
	-2, 610,
	-1, 324,
	81, 779,
	-2, 59,
	-1, 325,
	81, 737,
	-2, 60,
	-1, 330,
	81, 719,
	-2, 575,
	-1, 332,
	81, 758,
	-2, 577,
	-1, 600,
	53, 42,
	55, 42,
	-2, 44,
	-1, 736,
	111, 616,
	-2, 612,
	-1, 948,
	5, 29,
	-2, 420,
	-1, 973,
	5, 28,
	-2, 550,
	-1, 1200,
	5, 29,
	-2, 551,
	-1, 1245,
	5, 28,
	-2, 553,
	-1, 1309,
	5, 29,
	-2, 554,
}

const yyPrivate = 57344

const yyLast = 11310

var yyAct = [...]int{

	254, 1343, 1300, 1333, 672, 887, 1206, 258, 798, 547,
	1135, 284, 1107, 834, 1108, 816, 838, 594, 1256, 1038,
	881, 1104, 232, 847, 837, 799, 592, 914, 992, 1081,
	1012, 80, 224, 55, 761, 197, 546, 3, 197, 771,
	940, 768, 1041, 976, 1029, 260, 316, 610, 851, 701,
	981, 867, 329, 787, 479, 738, 485, 877, 310, 581,
	770, 428, 609, 323, 197, 197, 80, 922, 499, 256,
	197, 320, 197, 795, 80, 596, 225, 226, 227, 228,
	459, 194, 241, 318, 491, 561, 231, 54, 1336, 1320,
	309, 904, 1331, 1307, 1328, 888, 1319, 1099, 1306, 1194,
	433, 245, 454, 861, 1266, 903, 1130, 1131, 1129, 314,
	311, 319, 59, 830, 831, 611, 430, 612, 432, 1281,
	512, 511, 521, 522, 514, 515, 516, 517, 518, 519,
	520, 513, 829, 908, 523, 230, 229, 61, 62, 63,
	64, 65, 902, 1143, 1144, 1145, 251, 1000, 470, 1020,
	999, 1148, 1146, 1001, 860, 471, 468, 206, 1219, 192,
	188, 189, 190, 868, 1234, 442, 456, 1183, 458, 1181,
	223, 465, 466, 1330, 1327, 1301, 1062, 443, 796, 1293,
	852, 218, 436, 1351, 186, 1347, 197, 1257, 197, 817,
	819, 899, 896, 897, 197, 895, 1264, 680, 455, 457,
	1259, 197, 671, 991, 1049, 80, 80, 80, 80, 185,
	80, 186, 990, 989, 431, 439, 854, 200, 187, 80,
	854, 535, 536, 1286, 1203, 906, 909, 1068, 956, 934,
	1059, 201, 440, 1047, 441, 1152, 1061, 710, 203, 503,
	448, 449, 835, 523, 702, 209, 205, 450, 80, 1013,
	516, 517, 518, 519, 520, 513, 513, 707, 523, 523,
	901, 429, 475, 476, 818, 498, 1258, 497, 496, 487,
	916, 1049, 1291, 1101, 488, 191, 1162, 207, 68, 979,
	211, 453, 900, 1282, 498, 1153, 462, 463, 464, 1345,
	467, 868, 1346, 427, 1344, 1265, 1263, 854, 1048, 474,
	1047, 533, 1305, 1053, 1050, 1043, 1051, 1046, 202, 197,
	853, 1044, 1045, 69, 853, 613, 197, 197, 197, 1147,
	675, 905, 80, 788, 703, 1052, 429, 952, 80, 951,
	1060, 1055, 1058, 1295, 907, 212, 204, 496, 213, 214,
	215, 217, 216, 221, 1018, 497, 496, 915, 220, 219,
	52, 489, 745, 498, 493, 576, 445, 446, 447, 435,
	741, 314, 498, 1352, 600, 1048, 743, 744, 742, 184,
	1053, 1050, 1043, 1051, 1046, 477, 857, 1311, 1044, 1045,
	788, 858, 963, 563, 564, 565, 566, 567, 568, 569,
	1225, 853, 1052, 607, 709, 1224, 850, 848, 1042, 849,
	1033, 601, 1353, 1032, 846, 852, 1021, 1313, 537, 538,
	539, 540, 541, 542, 543, 544, 1292, 514, 515, 516,
	517, 518, 519, 520, 513, 1241, 1082, 523, 197, 1222,
	1065, 708, 308, 80, 1030, 437, 438, 1249, 1329, 197,
	197, 80, 762, 197, 763, 247, 197, 497, 496, 1002,
	197, 1003, 80, 80, 80, 80, 80, 80, 80, 80,
	713, 714, 1084, 1289, 498, 21, 80, 80, 931, 932,
	933, 1316, 478, 197, 621, 521, 522, 514, 515, 516,
	517, 518, 519, 520, 513, 677, 678, 523, 1013, 681,
	1008, 80, 684, 478, 1086, 197, 1090, 890, 1085, 764,
	1083, 80, 689, 285, 49, 1088, 686, 497, 496, 685,
	715, 1249, 1298, 670, 1087, 1249, 1261, 687, 739, 704,
	676, 679, 674, 236, 498, 1249, 478, 1089, 1091, 1249,
	1250, 1270, 690, 691, 692, 693, 694, 695, 696, 697,
	669, 724, 497, 496, 451, 80, 698, 699, 444, 1103,
	953, 1269, 740, 49, 1215, 1214, 736, 1126, 478, 498,
	1149, 237, 780, 783, 1202, 478, 855, 315, 789, 732,
	56, 734, 717, 1159, 1158, 461, 197, 1155, 1156, 197,
	197, 197, 197, 197, 977, 800, 775, 728, 730, 731,
	23, 197, 729, 773, 197, 1155, 1154, 1198, 197, 497,
	496, 946, 478, 197, 197, 765, 766, 80, 578, 478,
	946, 776, 777, 792, 971, 578, 498, 784, 972, 823,
	80, 603, 797, 1161, 314, 314, 314, 314, 314, 824,
	775, 791, 1157, 793, 794, 773, 478, 801, 52, 314,
	804, 326, 785, 620, 619, 1004, 828, 946, 314, 813,
	825, 1105, 737, 604, 977, 746, 747, 748, 749, 750,
	751, 752, 753, 754, 755, 756, 757, 758, 759, 760,
	826, 827, 197, 821, 822, 80, 978, 80, 23, 482,
	486, 197, 842, 606, 197, 80, 869, 870, 871, 883,
	802, 803, 577, 805, 1071, 605, 504, 603, 711, 978,
	958, 197, 955, 197, 197, 23, 1244, 52, 460, 460,
	460, 460, 238, 460, 1321, 1229, 673, 578, 886, 578,
	862, 882, 460, 879, 880, 1140, 52, 910, 1120, 1007,
	911, 548, 878, 863, 864, 865, 866, 885, 946, 873,
	559, 49, 977, 988, 957, 1338, 954, 913, 872, 874,
	875, 876, 1334, 52, 739, 891, 532, 893, 987, 534,
	52, 982, 983, 736, 1142, 912, 1105, 1034, 923, 985,
	924, 512, 511, 521, 522, 514, 515, 516, 517, 518,
	519, 520, 513, 930, 683, 523, 472, 545, 740, 549,
	550, 551, 552, 553, 554, 555, 556, 557, 936, 560,
	562, 562, 562, 562, 562, 562, 562, 562, 570, 571,
	572, 573, 810, 808, 283, 723, 807, 811, 809, 593,
	806, 80, 1325, 941, 197, 1318, 812, 1191, 587, 588,
	945, 1067, 973, 242, 243, 919, 492, 1324, 80, 929,
	962, 928, 1025, 618, 1297, 78, 960, 452, 1017, 480,
	995, 490, 1296, 1242, 1005, 986, 583, 586, 587, 588,
	584, 481, 585, 589, 716, 1015, 994, 1009, 996, 314,
	1196, 1230, 892, 682, 591, 492, 997, 239, 240, 233,
	328, 1024, 1014, 1026, 1027, 1028, 80, 80, 434, 80,
	937, 938, 939, 1275, 234, 56, 1274, 326, 1010, 1011,
	512, 511, 521, 522, 514, 515, 516, 517, 518, 519,
	520, 513, 80, 927, 523, 1022, 1023, 1232, 1031, 705,
	978, 926, 772, 774, 473, 700, 197, 1040, 1340, 1339,
	1340, 494, 1283, 1220, 706, 80, 460, 58, 790, 1054,
	60, 602, 725, 726, 460, 53, 1, 1332, 889, 1037,
	898, 1299, 1255, 1134, 845, 460, 460, 460, 460, 460,
	460, 460, 460, 1064, 836, 67, 426, 1036, 815, 460,
	460, 66, 1069, 1290, 844, 80, 80, 1074, 1075, 800,
	1106, 843, 1262, 1093, 1109, 800, 1080, 1092, 1218, 856,
	1019, 859, 1063, 1141, 1100, 548, 1294, 1016, 778, 779,
	626, 624, 625, 1116, 1114, 80, 623, 80, 80, 736,
	1115, 1111, 628, 627, 622, 208, 321, 590, 614, 328,
	328, 328, 328, 1133, 328, 884, 495, 70, 1127, 1132,
	1057, 1056, 1137, 328, 894, 197, 1150, 1151, 49, 1128,
	469, 1138, 1139, 80, 210, 274, 273, 276, 277, 278,
	279, 531, 925, 549, 275, 280, 80, 197, 998, 833,
	327, 1112, 501, 80, 712, 484, 1273, 1231, 961, 80,
	558, 786, 197, 259, 1163, 727, 272, 269, 271, 735,
	270, 1160, 315, 315, 315, 315, 315, 1165, 1077, 1078,
	1168, 718, 1170, 970, 505, 257, 249, 593, 1172, 820,
	313, 1094, 1095, 1167, 1097, 1098, 315, 1179, 574, 583,
	586, 587, 588, 584, 1171, 585, 589, 314, 582, 982,
	983, 80, 580, 80, 80, 80, 197, 80, 1197, 1208,
	1209, 1210, 579, 80, 984, 980, 328, 312, 1205, 1070,
	943, 80, 615, 1211, 944, 1193, 1280, 1217, 722, 1005,
	1213, 948, 949, 950, 920, 921, 25, 486, 57, 244,
	959, 80, 80, 80, 19, 965, 18, 966, 967, 968,
	969, 17, 20, 16, 15, 14, 29, 13, 460, 1228,
	460, 1227, 326, 12, 11, 10, 1176, 1177, 460, 1178,
	9, 8, 1180, 7, 1182, 839, 6, 5, 4, 235,
	22, 2, 0, 80, 80, 0, 1221, 0, 1223, 0,
	1109, 0, 0, 1243, 0, 0, 80, 0, 0, 947,
	0, 0, 0, 1174, 0, 0, 1260, 1254, 0, 1233,
	80, 0, 0, 0, 964, 1267, 1271, 1268, 1245, 935,
	1216, 1226, 0, 0, 0, 0, 0, 328, 0, 0,
	80, 0, 0, 0, 0, 328, 1109, 1284, 0, 0,
	0, 0, 0, 0, 0, 0, 328, 328, 328, 328,
	328, 328, 328, 328, 1288, 0, 0, 0, 0, 0,
	328, 328, 0, 1285, 0, 1303, 735, 80, 0, 0,
	0, 800, 1308, 0, 197, 0, 0, 0, 0, 974,
	975, 0, 80, 1314, 0, 719, 1190, 478, 0, 0,
	0, 0, 0, 0, 0, 501, 0, 0, 328, 1323,
	1322, 1079, 80, 483, 0, 0, 0, 315, 1326, 0,
	0, 0, 0, 0, 1235, 1236, 1337, 1237, 1238, 1239,
	1312, 0, 1348, 512, 511, 521, 522, 514, 515, 516,
	517, 518, 519, 520, 513, 0, 0, 523, 195, 767,
	0, 222, 1066, 0, 0, 0, 0, 0, 1125, 781,
	781, 0, 0, 0, 0, 781, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 248, 0, 195, 195, 0,
	460, 0, 781, 195, 0, 195, 0, 0, 1187, 478,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1102,
	0, 0, 0, 839, 0, 460, 0, 0, 0, 0,
	0, 328, 0, 0, 1117, 1118, 0, 0, 1119, 0,
	0, 1121, 0, 0, 328, 512, 511, 521, 522, 514,
	515, 516, 517, 518, 519, 520, 513, 0, 0, 523,
	1173, 0, 0, 0, 0, 0, 0, 1175, 0, 0,
	0, 0, 0, 0, 1039, 0, 0, 0, 1184, 1185,
	1186, 0, 0, 1189, 0, 0, 1110, 0, 49, 0,
	0, 0, 1341, 0, 1188, 0, 1199, 1200, 1201, 328,
	1204, 328, 0, 1122, 1123, 1124, 0, 478, 0, 328,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 195,
	1073, 195, 0, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 0, 0, 195, 328, 0, 0, 0, 0,
	0, 0, 1096, 512, 511, 521, 522, 514, 515, 516,
	517, 518, 519, 520, 513, 0, 0, 523, 0, 1195,
	0, 0, 0, 0, 0, 0, 548, 512, 511, 521,
	522, 514, 515, 516, 517, 518, 519, 520, 513, 1240,
	1076, 523, 0, 0, 0, 315, 0, 0, 0, 0,
	839, 0, 839, 0, 1251, 1252, 1253, 0, 0, 0,
	512, 511, 521, 522, 514, 515, 516, 517, 518, 519,
	520, 513, 0, 1192, 523, 0, 0, 0, 0, 0,
	0, 1276, 1277, 1278, 1279, 512, 511, 521, 522, 514,
	515, 516, 517, 518, 519, 520, 513, 0, 0, 523,
	0, 0, 195, 0, 0, 993, 0, 0, 0, 195,
	598, 195, 0, 0, 1073, 0, 0, 0, 0, 0,
	0, 0, 328, 0, 0, 0, 1304, 0, 0, 0,
	507, 1309, 510, 0, 460, 0, 0, 0, 524, 525,
	526, 527, 528, 529, 530, 1315, 508, 509, 506, 512,
	511, 521, 522, 514, 515, 516, 517, 518, 519, 520,
	513, 0, 0, 523, 0, 0, 0, 0, 0, 0,
	1035, 328, 1110, 328, 0, 1246, 0, 0, 839, 0,
	0, 0, 0, 0, 0, 0, 0, 1349, 1350, 0,
	1302, 548, 0, 0, 0, 0, 328, 0, 0, 0,
	0, 0, 0, 0, 1272, 0, 0, 1039, 839, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1110, 328,
	49, 195, 0, 0, 942, 0, 0, 0, 0, 0,
	0, 0, 195, 195, 0, 0, 195, 0, 0, 195,
	0, 328, 0, 688, 512, 511, 521, 522, 514, 515,
	516, 517, 518, 519, 520, 513, 781, 0, 523, 1113,
	993, 0, 781, 0, 0, 0, 195, 511, 521, 522,
	514, 515, 516, 517, 518, 519, 520, 513, 0, 0,
	523, 0, 0, 0, 0, 0, 0, 0, 195, 328,
	0, 328, 1136, 0, 0, 0, 0, 688, 0, 0,
	0, 0, 0, 0, 1335, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1164, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 248,
	1166, 0, 0, 0, 248, 248, 0, 1169, 782, 782,
	248, 0, 0, 328, 782, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 248, 248, 248, 248, 0, 195,
	0, 782, 195, 195, 195, 195, 195, 0, 0, 0,
	0, 0, 0, 0, 814, 0, 0, 195, 0, 0,
	0, 598, 0, 0, 0, 0, 195, 195, 0, 0,
	0, 0, 0, 0, 0, 1207, 0, 1207, 1207, 1207,
	0, 1212, 0, 0, 0, 0, 0, 328, 0, 0,
	0, 0, 0, 0, 0, 1207, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 328, 328, 328, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	0, 0, 0, 0, 195, 0, 0, 195, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1247, 1248, 0,
	0, 0, 0, 0, 195, 0, 917, 918, 0, 0,
	1136, 0, 0, 0, 688, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1207, 0, 248, 23, 24, 50,
	26, 27, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1287, 0, 42, 0, 0, 0,
	0, 28, 47, 48, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 37, 0, 248, 0, 52, 0, 0, 781, 0,
	0, 1310, 0, 0, 0, 0, 0, 0, 0, 248,
	0, 0, 0, 0, 0, 0, 1317, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1207, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 0, 0, 0, 30, 31, 33, 32, 35,
	0, 0, 0, 0, 0, 0, 0, 0, 643, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 36, 43, 44, 0, 0, 45, 46, 34, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	38, 39, 0, 40, 41, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 631, 0, 0, 0, 195,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 248,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	248, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	688, 644, 0, 0, 0, 51, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 782, 0, 0, 0, 0,
	0, 782, 657, 658, 659, 660, 661, 662, 663, 0,
	664, 665, 666, 667, 668, 645, 646, 647, 648, 629,
	630, 0, 0, 632, 0, 633, 634, 635, 636, 637,
	638, 639, 640, 641, 642, 649, 650, 651, 652, 653,
	654, 655, 656, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 195, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	195, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 598,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 414, 404, 0, 376, 417, 354,
	368, 425, 369, 370, 397, 340, 384, 133, 366, 0,
	357, 335, 363, 336, 355, 378, 100, 381, 353, 406,
	387, 416, 114, 423, 116, 392, 0, 152, 125, 0,
	0, 380, 408, 382, 402, 375, 398, 345, 391, 418,
	367, 395, 419, 0, 0, 0, 79, 0, 840, 841,
	0, 0, 0, 0, 0, 93, 0, 394, 413, 365,
	396, 334, 393, 0, 338, 341, 424, 411, 360, 361,
	1006, 0, 0, 0, 0, 0, 0, 379, 383, 399,
	373, 0, 0, 0, 0, 0, 0, 0, 0, 358,
	0, 390, 0, 0, 0, 342, 339, 782, 0, 377,
	0, 0, 0, 344, 0, 359, 400, 195, 333, 403,
	409, 374, 198, 412, 372, 371, 415, 139, 0, 155,
	105, 113, 0, 87, 0, 104, 131, 144, 148, 407,
	356, 364, 96, 362, 146, 135, 167, 389, 136, 145,
	117, 159, 140, 166, 199, 174, 157, 173, 82, 156,
	165, 94, 149, 84, 163, 154, 123, 109, 110, 83,
	0, 143, 99, 103, 98, 132, 160, 161, 97, 182,
	88, 172, 86, 89, 171, 130, 158, 164, 124, 121,
	85, 162, 122, 120, 112, 101, 106, 137, 119, 138,
	107, 127, 126, 128, 0, 337, 0, 153, 169, 183,
	91, 352, 410, 175, 176, 177, 178, 179, 0, 0,
	92, 129, 90, 108, 150, 111, 118, 142, 181, 134,
	147, 95, 168, 151, 348, 351, 346, 347, 385, 386,
	420, 421, 422, 401, 343, 0, 349, 350, 0, 405,
	388, 81, 0, 115, 180, 141, 102, 170, 414, 404,
	0, 376, 417, 354, 368, 425, 369, 370, 397, 340,
	384, 133, 366, 0, 357, 335, 363, 336, 355, 378,
	100, 381, 353, 406, 387, 416, 114, 423, 116, 392,
	0, 152, 125, 0, 0, 380, 408, 382, 402, 375,
	398, 345, 391, 418, 367, 395, 419, 0, 0, 0,
	79, 0, 840, 841, 0, 0, 0, 0, 0, 93,
	0, 394, 413, 365, 396, 334, 393, 0, 338, 341,
	424, 411, 360, 361, 0, 0, 0, 0, 0, 0,
	0, 379, 383, 399, 373, 0, 0, 0, 0, 0,
	0, 0, 0, 358, 0, 390, 0, 0, 0, 342,
	339, 0, 0, 377, 0, 0, 0, 344, 0, 359,
	400, 0, 333, 403, 409, 374, 198, 412, 372, 371,
	415, 139, 0, 155, 105, 113, 0, 87, 0, 104,
	131, 144, 148, 407, 356, 364, 96, 362, 146, 135,
	167, 389, 136, 145, 117, 159, 140, 166, 199, 174,
	157, 173, 82, 156, 165, 94, 149, 84, 163, 154,
	123, 109, 110, 83, 0, 143, 99, 103, 98, 132,
	160, 161, 97, 182, 88, 172, 86, 89, 171, 130,
	158, 164, 124, 121, 85, 162, 122, 120, 112, 101,
	106, 137, 119, 138, 107, 127, 126, 128, 0, 337,
	0, 153, 169, 183, 91, 352, 410, 175, 176, 177,
	178, 179, 0, 0, 92, 129, 90, 108, 150, 111,
	118, 142, 181, 134, 147, 95, 168, 151, 348, 351,
	346, 347, 385, 386, 420, 421, 422, 401, 343, 0,
	349, 350, 0, 405, 388, 81, 0, 115, 180, 141,
	102, 170, 414, 404, 0, 376, 417, 354, 368, 425,
	369, 370, 397, 340, 384, 133, 366, 0, 357, 335,
	363, 336, 355, 378, 100, 381, 353, 406, 387, 416,
	114, 423, 116, 392, 0, 152, 125, 0, 0, 380,
	408, 382, 402, 375, 398, 345, 391, 418, 367, 395,
	419, 52, 0, 0, 79, 0, 0, 0, 0, 0,
	0, 0, 0, 93, 0, 394, 413, 365, 396, 334,
	393, 0, 338, 341, 424, 411, 360, 361, 0, 0,
	0, 0, 0, 0, 0, 379, 383, 399, 373, 0,
	0, 0, 0, 0, 0, 0, 0, 358, 0, 390,
	0, 0, 0, 342, 339, 0, 0, 377, 0, 0,
	0, 344, 0, 359, 400, 0, 333, 403, 409, 374,
	198, 412, 372, 371, 415, 139, 0, 155, 105, 113,
	0, 87, 0, 104, 131, 144, 148, 407, 356, 364,
	96, 362, 146, 135, 167, 389, 136, 145, 117, 159,
	140, 166, 199, 174, 157, 173, 82, 156, 165, 94,
	149, 84, 163, 154, 123, 109, 110, 83, 0, 143,
	99, 103, 98, 132, 160, 161, 97, 182, 88, 172,
	86, 89, 171, 130, 158, 164, 124, 121, 85, 162,
	122, 120, 112, 101, 106, 137, 119, 138, 107, 127,
	126, 128, 0, 337, 0, 153, 169, 183, 91, 352,
	410, 175, 176, 177, 178, 179, 0, 0, 92, 129,
	90, 108, 150, 111, 118, 142, 181, 134, 147, 95,
	168, 151, 348, 351, 346, 347, 385, 386, 420, 421,
	422, 401, 343, 0, 349, 350, 0, 405, 388, 81,
	0, 115, 180, 141, 102, 170, 414, 404, 0, 376,
	417, 354, 368, 425, 369, 370, 397, 340, 384, 133,
	366, 0, 357, 335, 363, 336, 355, 378, 100, 381,
	353, 406, 387, 416, 114, 423, 116, 392, 0, 152,
	125, 0, 0, 380, 408, 382, 402, 375, 398, 345,
	391, 418, 367, 395, 419, 0, 0, 0, 79, 0,
	0, 0, 0, 0, 0, 0, 0, 93, 0, 394,
	413, 365, 396, 334, 393, 0, 338, 341, 424, 411,
	360, 361, 0, 0, 0, 0, 0, 0, 0, 379,
	383, 399, 373, 0, 0, 0, 0, 0, 0, 1072,
	0, 358, 0, 390, 0, 0, 0, 342, 339, 0,
	0, 377, 0, 0, 0, 344, 0, 359, 400, 0,
	333, 403, 409, 374, 198, 412, 372, 371, 415, 139,
	0, 155, 105, 113, 0, 87, 0, 104, 131, 144,
	148, 407, 356, 364, 96, 362, 146, 135, 167, 389,
	136, 145, 117, 159, 140, 166, 199, 174, 157, 173,
	82, 156, 165, 94, 149, 84, 163, 154, 123, 109,
	110, 83, 0, 143, 99, 103, 98, 132, 160, 161,
	97, 182, 88, 172, 86, 89, 171, 130, 158, 164,
	124, 121, 85, 162, 122, 120, 112, 101, 106, 137,
	119, 138, 107, 127, 126, 128, 0, 337, 0, 153,
	169, 183, 91, 352, 410, 175, 176, 177, 178, 179,
	0, 0, 92, 129, 90, 108, 150, 111, 118, 142,
	181, 134, 147, 95, 168, 151, 348, 351, 346, 347,
	385, 386, 420, 421, 422, 401, 343, 0, 349, 350,
	0, 405, 388, 81, 0, 115, 180, 141, 102, 170,
	414, 404, 0, 376, 417, 354, 368, 425, 369, 370,
	397, 340, 384, 133, 366, 0, 357, 335, 363, 336,
	355, 378, 100, 381, 353, 406, 387, 416, 114, 423,
	116, 392, 0, 152, 125, 0, 0, 380, 408, 382,
	402, 375, 398, 345, 391, 418, 367, 395, 419, 0,
	0, 0, 253, 0, 0, 0, 0, 0, 0, 0,
	0, 93, 0, 394, 413, 365, 396, 334, 393, 0,
	338, 341, 424, 411, 360, 361, 0, 0, 0, 0,
	0, 0, 0, 379, 383, 399, 373, 0, 0, 0,
	0, 0, 0, 733, 0, 358, 0, 390, 0, 0,
	0, 342, 339, 0, 0, 377, 0, 0, 0, 344,
	0, 359, 400, 0, 333, 403, 409, 374, 198, 412,
	372, 371, 415, 139, 0, 155, 105, 113, 0, 87,
	0, 104, 131, 144, 148, 407, 356, 364, 96, 362,
	146, 135, 167, 389, 136, 145, 117, 159, 140, 166,
	199, 174, 157, 173, 82, 156, 165, 94, 149, 84,
	163, 154, 123, 109, 110, 83, 0, 143, 99, 103,
	98, 132, 160, 161, 97, 182, 88, 172, 86, 89,
	171, 130, 158, 164, 124, 121, 85, 162, 122, 120,
	112, 101, 106, 137, 119, 138, 107, 127, 126, 128,
	0, 337, 0, 153, 169, 183, 91, 352, 410, 175,
	176, 177, 178, 179, 0, 0, 92, 129, 90, 108,
	150, 111, 118, 142, 181, 134, 147, 95, 168, 151,
	348, 351, 346, 347, 385, 386, 420, 421, 422, 401,
	343, 0, 349, 350, 0, 405, 388, 81, 0, 115,
	180, 141, 102, 170, 414, 404, 0, 376, 417, 354,
	368, 425, 369, 370, 397, 340, 384, 133, 366, 0,
	357, 335, 363, 336, 355, 378, 100, 381, 353, 406,
	387, 416, 114, 423, 116, 392, 0, 152, 125, 0,
	0, 380, 408, 382, 402, 375, 398, 345, 391, 418,
	367, 395, 419, 0, 0, 0, 79, 0, 0, 0,
	0, 0, 0, 0, 0, 93, 0, 394, 413, 365,
	396, 334, 393, 0, 338, 341, 424, 411, 360, 361,
	0, 0, 0, 0, 0, 0, 0, 379, 383, 399,
	373, 0, 0, 0, 0, 0, 0, 0, 0, 358,
	0, 390, 0, 0, 0, 342, 339, 0, 0, 377,
	0, 0, 0, 344, 0, 359, 400, 0, 333, 403,
	409, 374, 198, 412, 372, 371, 415, 139, 0, 155,
	105, 113, 0, 87, 0, 104, 131, 144, 148, 407,
	356, 364, 96, 362, 146, 135, 167, 389, 136, 145,
	117, 159, 140, 166, 199, 174, 157, 173, 82, 156,
	165, 94, 149, 84, 163, 154, 123, 109, 110, 83,
	0, 143, 99, 103, 98, 132, 160, 161, 97, 182,
	88, 172, 86, 89, 171, 130, 158, 164, 124, 121,
	85, 162, 122, 120, 112, 101, 106, 137, 119, 138,
	107, 127, 126, 128, 0, 337, 0, 153, 169, 183,
	91, 352, 410, 175, 176, 177, 178, 179, 0, 0,
	92, 129, 90, 108, 150, 111, 118, 142, 181, 134,
	147, 95, 168, 151, 348, 351, 346, 347, 385, 386,
	420, 421, 422, 401, 343, 0, 349, 350, 0, 405,
	388, 81, 0, 115, 180, 141, 102, 170, 414, 404,
	0, 376, 417, 354, 368, 425, 369, 370, 397, 340,
	384, 133, 366, 0, 357, 335, 363, 336, 355, 378,
	100, 381, 353, 406, 387, 416, 114, 423, 116, 392,
	0, 152, 125, 0, 0, 380, 408, 382, 402, 375,
	398, 345, 391, 418, 367, 395, 419, 0, 0, 0,
	253, 0, 0, 0, 0, 0, 0, 0, 0, 93,
	0, 394, 413, 365, 396, 334, 393, 0, 338, 341,
	424, 411, 360, 361, 0, 0, 0, 0, 0, 0,
	0, 379, 383, 399, 373, 0, 0, 0, 0, 0,
	0, 0, 0, 358, 0, 390, 0, 0, 0, 342,
	339, 0, 0, 377, 0, 0, 0, 344, 0, 359,
	400, 0, 333, 403, 409, 374, 198, 412, 372, 371,
	415, 139, 0, 155, 105, 113, 0, 87, 0, 104,
	131, 144, 148, 407, 356, 364, 96, 362, 146, 135,
	167, 389, 136, 145, 117, 159, 140, 166, 199, 174,
	157, 173, 82, 156, 165, 94, 149, 84, 163, 154,
	123, 109, 110, 83, 0, 143, 99, 103, 98, 132,
	160, 161, 97, 182, 88, 172, 86, 89, 171, 130,
	158, 164, 124, 121, 85, 162, 122, 120, 112, 101,
	106, 137, 119, 138, 107, 127, 126, 128, 0, 337,
	0, 153, 169, 183, 91, 352, 410, 175, 176, 177,
	178, 179, 0, 0, 92, 129, 90, 108, 150, 111,
	118, 142, 181, 134, 147, 95, 168, 151, 348, 351,
	346, 347, 385, 386, 420, 421, 422, 401, 343, 0,
	349, 350, 0, 405, 388, 81, 0, 115, 180, 141,
	102, 170, 414, 404, 0, 376, 417, 354, 368, 425,
	369, 370, 397, 340, 384, 133, 366, 0, 357, 335,
	363, 336, 355, 378, 100, 381, 353, 406, 387, 416,
	114, 423, 116, 392, 0, 152, 125, 0, 0, 380,
	408, 382, 402, 375, 398, 345, 391, 418, 367, 395,
	419, 0, 0, 0, 79, 0, 0, 0, 0, 0,
	0, 0, 0, 93, 0, 394, 413, 365, 396, 334,
	393, 0, 338, 341, 424, 411, 360, 361, 0, 0,
	0, 0, 0, 0, 0, 379, 383, 399, 373, 0,
	0, 0, 0, 0, 0, 0, 0, 358, 0, 390,
	0, 0, 0, 342, 339, 0, 0, 377, 0, 0,
	0, 344, 0, 359, 400, 0, 333, 403, 409, 374,
	198, 412, 372, 371, 415, 139, 0, 155, 105, 113,
	0, 87, 0, 104, 131, 144, 148, 407, 356, 364,
	96, 362, 146, 135, 167, 389, 136, 145, 117, 159,
	140, 166, 199, 174, 157, 173, 82, 156, 165, 94,
	149, 84, 163, 154, 123, 109, 110, 83, 0, 143,
	99, 103, 98, 132, 160, 161, 97, 182, 88, 172,
	86, 331, 171, 130, 158, 164, 124, 121, 85, 162,
	122, 120, 112, 101, 106, 137, 119, 138, 107, 127,
	126, 128, 0, 337, 0, 153, 169, 183, 91, 352,
	410, 175, 176, 177, 178, 179, 0, 0, 92, 332,
	330, 108, 150, 111, 118, 142, 181, 134, 147, 95,
	168, 151, 348, 351, 346, 347, 385, 386, 420, 421,
	422, 401, 343, 0, 349, 350, 0, 405, 388, 81,
	0, 115, 180, 141, 102, 170, 414, 404, 0, 376,
	417, 354, 368, 425, 369, 370, 397, 340, 384, 133,
	366, 0, 357, 335, 363, 336, 355, 378, 100, 381,
	353, 406, 387, 416, 114, 423, 116, 392, 0, 152,
	125, 0, 0, 380, 408, 382, 402, 375, 398, 345,
	391, 418, 367, 395, 419, 0, 0, 0, 196, 0,
	0, 0, 0, 0, 0, 0, 0, 93, 0, 394,
	413, 365, 396, 334, 393, 0, 338, 341, 424, 411,
	360, 361, 0, 0, 0, 0, 0, 0, 0, 379,
	383, 399, 373, 0, 0, 0, 0, 0, 0, 0,
	0, 358, 0, 390, 0, 0, 0, 342, 339, 0,
	0, 377, 0, 0, 0, 344, 0, 359, 400, 0,
	333, 403, 409, 374, 198, 412, 372, 371, 415, 139,
	0, 155, 105, 113, 0, 87, 0, 104, 131, 144,
	148, 407, 356, 364, 96, 362, 146, 135, 167, 389,
	136, 145, 117, 159, 140, 166, 199, 174, 157, 173,
	82, 156, 165, 94, 149, 84, 163, 154, 123, 109,
	110, 83, 0, 143, 99, 103, 98, 132, 160, 161,
	97, 182, 88, 172, 86, 89, 171, 130, 158, 164,
	124, 121, 85, 162, 122, 120, 112, 101, 106, 137,
	119, 138, 107, 127, 126, 128, 0, 337, 0, 153,
	169, 183, 91, 352, 410, 175, 176, 177, 178, 179,
	0, 0, 92, 129, 90, 108, 150, 111, 118, 142,
	181, 134, 147, 95, 168, 151, 348, 351, 346, 347,
	385, 386, 420, 421, 422, 401, 343, 0, 349, 350,
	0, 405, 388, 81, 0, 115, 180, 141, 102, 170,
	414, 404, 0, 376, 417, 354, 368, 425, 369, 370,
	397, 340, 384, 133, 366, 0, 357, 335, 363, 336,
	355, 378, 100, 381, 353, 406, 387, 416, 114, 423,
	116, 392, 0, 152, 125, 0, 0, 380, 408, 382,
	402, 375, 398, 345, 391, 418, 367, 395, 419, 0,
	0, 0, 79, 0, 0, 0, 0, 0, 0, 0,
	0, 93, 0, 394, 413, 365, 396, 334, 393, 0,
	338, 341, 424, 411, 360, 361, 0, 0, 0, 0,
	0, 0, 0, 379, 383, 399, 373, 0, 0, 0,
	0, 0, 0, 0, 0, 358, 0, 390, 0, 0,
	0, 342, 339, 0, 0, 377, 0, 0, 0, 344,
	0, 359, 400, 0, 333, 403, 409, 374, 198, 412,
	372, 371, 415, 139, 0, 155, 105, 113, 0, 87,
	0, 104, 131, 144, 148, 407, 356, 364, 96, 362,
	146, 135, 167, 389, 136, 145, 117, 159, 140, 166,
	199, 174, 157, 173, 82, 156, 608, 94, 149, 84,
	163, 154, 123, 109, 110, 83, 0, 143, 99, 103,
	98, 132, 160, 161, 97, 182, 88, 172, 86, 331,
	171, 130, 158, 164, 124, 121, 85, 162, 122, 120,
	112, 101, 106, 137, 119, 138, 107, 127, 126, 128,
	0, 337, 0, 153, 169, 183, 91, 352, 410, 175,
	176, 177, 178, 179, 0, 0, 92, 332, 330, 108,
	150, 111, 118, 142, 181, 134, 147, 95, 168, 151,
	348, 351, 346, 347, 385, 386, 420, 421, 422, 401,
	343, 0, 349, 350, 0, 405, 388, 81, 0, 115,
	180, 141, 102, 170, 414, 404, 0, 376, 417, 354,
	368, 425, 369, 370, 397, 340, 384, 133, 366, 0,
	357, 335, 363, 336, 355, 378, 100, 381, 353, 406,
	387, 416, 114, 423, 116, 392, 0, 152, 125, 0,
	0, 380, 408, 382, 402, 375, 398, 345, 391, 418,
	367, 395, 419, 0, 0, 0, 79, 0, 0, 0,
	0, 0, 0, 0, 0, 93, 0, 394, 413, 365,
	396, 334, 393, 0, 338, 341, 424, 411, 360, 361,
	0, 0, 0, 0, 0, 0, 0, 379, 383, 399,
	373, 0, 0, 0, 0, 0, 0, 0, 0, 358,
	0, 390, 0, 0, 0, 342, 339, 0, 0, 377,
	0, 0, 0, 344, 0, 359, 400, 0, 333, 403,
	409, 374, 198, 412, 372, 371, 415, 139, 0, 155,
	105, 113, 0, 87, 0, 104, 131, 144, 148, 407,
	356, 364, 96, 362, 146, 135, 167, 389, 136, 145,
	117, 159, 140, 166, 199, 174, 157, 173, 82, 156,
	322, 94, 149, 84, 163, 154, 123, 109, 110, 83,
	0, 143, 99, 103, 98, 132, 160, 161, 97, 182,
	88, 172, 86, 331, 171, 130, 158, 164, 124, 121,
	85, 162, 122, 120, 112, 101, 106, 137, 119, 138,
	107, 127, 126, 128, 0, 337, 0, 153, 169, 183,
	91, 352, 410, 175, 176, 177, 178, 179, 0, 0,
	92, 332, 330, 325, 324, 111, 118, 142, 181, 134,
	147, 95, 168, 151, 348, 351, 346, 347, 385, 386,
	420, 421, 422, 401, 343, 0, 349, 350, 0, 405,
	388, 81, 0, 115, 180, 141, 102, 170, 133, 0,
	0, 769, 0, 255, 0, 0, 0, 100, 0, 252,
	0, 0, 0, 114, 295, 116, 0, 0, 152, 125,
	0, 0, 0, 0, 286, 287, 0, 0, 0, 0,
	0, 0, 0, 0, 52, 0, 0, 253, 274, 273,
	276, 277, 278, 279, 0, 0, 93, 275, 280, 281,
	282, 0, 0, 250, 267, 0, 294, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 265, 246, 0,
	0, 0, 306, 0, 266, 0, 0, 261, 262, 263,
	268, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 198, 0, 0, 304, 0, 139, 0,
	155, 105, 113, 0, 87, 0, 104, 131, 144, 148,
	0, 0, 0, 96, 0, 146, 135, 167, 0, 136,
	145, 117, 159, 140, 166, 199, 174, 157, 173, 82,
	156, 165, 94, 149, 84, 163, 154, 123, 109, 110,
	83, 0, 143, 99, 103, 98, 132, 160, 161, 97,
	182, 88, 172, 86, 89, 171, 130, 158, 164, 124,
	121, 85, 162, 122, 120, 112, 101, 106, 137, 119,
	138, 107, 127, 126, 128, 0, 0, 0, 153, 169,
	183, 91, 0, 0, 175, 176, 177, 178, 179, 0,
	0, 92, 129, 90, 108, 150, 111, 118, 142, 181,
	134, 147, 95, 168, 151, 296, 305, 302, 303, 300,
	301, 299, 298, 297, 307, 288, 289, 290, 291, 293,
	0, 292, 81, 0, 115, 180, 141, 102, 170, 133,
	0, 0, 0, 0, 255, 0, 0, 0, 100, 0,
	252, 0, 0, 0, 114, 295, 116, 0, 0, 152,
	125, 0, 0, 0, 0, 286, 287, 0, 0, 0,
	0, 0, 0, 0, 0, 52, 0, 478, 253, 274,
	273, 276, 277, 278, 279, 0, 0, 93, 275, 280,
	281, 282, 0, 0, 250, 267, 0, 294, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 264, 265, 0,
	0, 0, 0, 306, 0, 266, 0, 0, 261, 262,
	263, 268, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 198, 0, 0, 304, 0, 139,
	0, 155, 105, 113, 0, 87, 0, 104, 131, 144,
	148, 0, 0, 0, 96, 0, 146, 135, 167, 0,
	136, 145, 117, 159, 140, 166, 199, 174, 157, 173,
	82, 156, 165, 94, 149, 84, 163, 154, 123, 109,
	110, 83, 0, 143, 99, 103, 98, 132, 160, 161,
	97, 182, 88, 172, 86, 89, 171, 130, 158, 164,
	124, 121, 85, 162, 122, 120, 112, 101, 106, 137,
	119, 138, 107, 127, 126, 128, 0, 0, 0, 153,
	169, 183, 91, 0, 0, 175, 176, 177, 178, 179,
	0, 0, 92, 129, 90, 108, 150, 111, 118, 142,
	181, 134, 147, 95, 168, 151, 296, 305, 302, 303,
	300, 301, 299, 298, 297, 307, 288, 289, 290, 291,
	293, 0, 292, 81, 0, 115, 180, 141, 102, 170,
	133, 0, 0, 0, 0, 255, 0, 0, 0, 100,
	0, 252, 0, 0, 0, 114, 295, 116, 0, 0,
	152, 125, 0, 0, 0, 0, 286, 287, 0, 0,
	0, 0, 0, 0, 0, 0, 52, 0, 0, 253,
	274, 273, 276, 277, 278, 279, 0, 0, 93, 275,
	280, 281, 282, 0, 0, 250, 267, 0, 294, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 264, 265,
	246, 0, 0, 0, 306, 0, 266, 0, 0, 261,
	262, 263, 268, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 198, 0, 0, 304, 0,
	139, 0, 155, 105, 113, 0, 87, 0, 104, 131,
	144, 148, 0, 0, 0, 96, 0, 146, 135, 167,
	0, 136, 145, 117, 159, 140, 166, 199, 174, 157,
	173, 82, 156, 165, 94, 149, 84, 163, 154, 123,
	109, 110, 83, 0, 143, 99, 103, 98, 132, 160,
	161, 97, 182, 88, 172, 86, 89, 171, 130, 158,
	164, 124, 121, 85, 162, 122, 120, 112, 101, 106,
	137, 119, 138, 107, 127, 126, 128, 0, 0, 0,
	153, 169, 183, 91, 0, 0, 175, 176, 177, 178,
	179, 0, 0, 92, 129, 90, 108, 150, 111, 118,
	142, 181, 134, 147, 95, 168, 151, 296, 305, 302,
	303, 300, 301, 299, 298, 297, 307, 288, 289, 290,
	291, 293, 0, 292, 81, 0, 115, 180, 141, 102,
	170, 133, 0, 0, 0, 0, 255, 0, 0, 0,
	100, 0, 252, 0, 0, 0, 114, 295, 116, 0,
	0, 152, 125, 0, 0, 0, 0, 286, 287, 0,
	0, 0, 0, 0, 0, 832, 0, 52, 0, 0,
	253, 274, 273, 276, 277, 278, 279, 0, 0, 93,
	275, 280, 281, 282, 0, 0, 250, 267, 0, 294,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 264,
	265, 0, 0, 0, 0, 306, 0, 266, 0, 0,
	261, 262, 263, 268, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 198, 0, 0, 304,
	0, 139, 0, 155, 105, 113, 0, 87, 0, 104,
	131, 144, 148, 0, 0, 0, 96, 0, 146, 135,
	167, 0, 136, 145, 117, 159, 140, 166, 199, 174,
	157, 173, 82, 156, 165, 94, 149, 84, 163, 154,
	123, 109, 110, 83, 0, 143, 99, 103, 98, 132,
	160, 161, 97, 182, 88, 172, 86, 89, 171, 130,
	158, 164, 124, 121, 85, 162, 122, 120, 112, 101,
	106, 137, 119, 138, 107, 127, 126, 128, 0, 0,
	0, 153, 169, 183, 91, 0, 0, 175, 176, 177,
	178, 179, 0, 0, 92, 129, 90, 108, 150, 111,
	118, 142, 181, 134, 147, 95, 168, 151, 296, 305,
	302, 303, 300, 301, 299, 298, 297, 307, 288, 289,
	290, 291, 293, 23, 292, 81, 0, 115, 180, 141,
	102, 170, 0, 0, 0, 133, 0, 0, 0, 0,
	255, 0, 0, 0, 100, 0, 252, 0, 0, 0,
	114, 295, 116, 0, 0, 152, 125, 0, 0, 0,
	0, 286, 287, 0, 0, 0, 0, 0, 0, 0,
	0, 52, 0, 0, 253, 274, 273, 276, 277, 278,
	279, 0, 0, 93, 275, 280, 281, 282, 0, 0,
	250, 267, 0, 294, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 264, 265, 0, 0, 0, 0, 306,
	0, 266, 0, 0, 261, 262, 263, 268, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	198, 0, 0, 304, 0, 139, 0, 155, 105, 113,
	0, 87, 0, 104, 131, 144, 148, 0, 0, 0,
	96, 0, 146, 135, 167, 0, 136, 145, 117, 159,
	140, 166, 199, 174, 157, 173, 82, 156, 165, 94,
	149, 84, 163, 154, 123, 109, 110, 83, 0, 143,
	99, 103, 98, 132, 160, 161, 97, 182, 88, 172,
	86, 89, 171, 130, 158, 164, 124, 121, 85, 162,
	122, 120, 112, 101, 106, 137, 119, 138, 107, 127,
	126, 128, 0, 0, 0, 153, 169, 183, 91, 0,
	0, 175, 176, 177, 178, 179, 0, 0, 92, 129,
	90, 108, 150, 111, 118, 142, 181, 134, 147, 95,
	168, 151, 296, 305, 302, 303, 300, 301, 299, 298,
	297, 307, 288, 289, 290, 291, 293, 0, 292, 81,
	0, 115, 180, 141, 102, 170, 133, 0, 0, 0,
	0, 255, 0, 0, 0, 100, 0, 252, 0, 0,
	0, 114, 295, 116, 0, 0, 152, 125, 0, 0,
	0, 0, 286, 287, 0, 0, 0, 0, 0, 0,
	0, 0, 52, 0, 0, 253, 274, 273, 276, 277,
	278, 279, 0, 0, 93, 275, 280, 281, 282, 0,
	0, 250, 267, 0, 294, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 264, 265, 0, 0, 0, 0,
	306, 0, 266, 0, 0, 261, 262, 263, 268, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 198, 0, 0, 304, 0, 139, 0, 155, 105,
	113, 0, 87, 0, 104, 131, 144, 148, 0, 0,
	0, 96, 0, 146, 135, 167, 0, 136, 145, 117,
	159, 140, 166, 199, 174, 157, 173, 82, 156, 165,
	94, 149, 84, 163, 154, 123, 109, 110, 83, 0,
	143, 99, 103, 98, 132, 160, 161, 97, 182, 88,
	172, 86, 89, 171, 130, 158, 164, 124, 121, 85,
	162, 122, 120, 112, 101, 106, 137, 119, 138, 107,
	127, 126, 128, 0, 0, 0, 153, 169, 183, 91,
	0, 0, 175, 176, 177, 178, 179, 0, 0, 92,
	129, 90, 108, 150, 111, 118, 142, 181, 134, 147,
	95, 168, 151, 296, 305, 302, 303, 300, 301, 299,
	298, 297, 307, 288, 289, 290, 291, 293, 133, 292,
	81, 0, 115, 180, 141, 102, 170, 100, 0, 0,
	0, 0, 0, 114, 295, 116, 0, 0, 152, 125,
	0, 0, 0, 0, 286, 287, 0, 0, 0, 0,
	0, 0, 0, 0, 52, 0, 0, 253, 274, 273,
	276, 277, 278, 279, 0, 0, 93, 275, 280, 281,
	282, 0, 0, 0, 267, 0, 294, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 264, 265, 0, 0,
	0, 0, 306, 0, 266, 0, 0, 261, 262, 263,
	268, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 198, 0, 0, 304, 0, 139, 0,
	155, 105, 113, 0, 87, 0, 104, 131, 144, 148,
	0, 0, 0, 96, 0, 146, 135, 167, 1342, 136,
	145, 117, 159, 140, 166, 199, 174, 157, 173, 82,
	156, 165, 94, 149, 84, 163, 154, 123, 109, 110,
	83, 0, 143, 99, 103, 98, 132, 160, 161, 97,
	182, 88, 172, 86, 89, 171, 130, 158, 164, 124,
	121, 85, 162, 122, 120, 112, 101, 106, 137, 119,
	138, 107, 127, 126, 128, 0, 0, 0, 153, 169,
	183, 91, 0, 0, 175, 176, 177, 178, 179, 0,
	0, 92, 129, 90, 108, 150, 111, 118, 142, 181,
	134, 147, 95, 168, 151, 296, 305, 302, 303, 300,
	301, 299, 298, 297, 307, 288, 289, 290, 291, 293,
	133, 292, 81, 0, 115, 180, 141, 102, 170, 100,
	0, 0, 0, 0, 0, 114, 295, 116, 0, 0,
	152, 125, 0, 0, 0, 0, 286, 287, 0, 0,
	0, 0, 0, 0, 0, 0, 52, 0, 0, 253,
	274, 273, 276, 277, 278, 279, 0, 0, 93, 275,
	280, 281, 282, 0, 0, 0, 267, 0, 294, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 264, 265,
	0, 0, 0, 0, 306, 0, 266, 0, 0, 261,
	262, 263, 268, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 198, 0, 0, 304, 0,
	139, 0, 155, 105, 113, 0, 87, 0, 104, 131,
	144, 148, 0, 0, 0, 96, 0, 146, 135, 167,
	0, 136, 145, 117, 159, 140, 166, 199, 174, 157,
	173, 82, 156, 165, 94, 149, 84, 163, 154, 123,
	109, 110, 83, 0, 143, 99, 103, 98, 132, 160,
	161, 97, 182, 88, 172, 86, 89, 171, 130, 158,
	164, 124, 121, 85, 162, 122, 120, 112, 101, 106,
	137, 119, 138, 107, 127, 126, 128, 0, 0, 0,
	153, 169, 183, 91, 0, 0, 175, 176, 177, 178,
	179, 0, 0, 92, 129, 90, 108, 150, 111, 118,
	142, 181, 134, 147, 95, 168, 151, 296, 305, 302,
	303, 300, 301, 299, 298, 297, 307, 288, 289, 290,
	291, 293, 133, 292, 81, 0, 115, 180, 141, 102,
	170, 100, 0, 0, 0, 0, 0, 114, 0, 116,
	0, 0, 152, 125, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 79, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 512, 511, 521, 522,
	514, 515, 516, 517, 518, 519, 520, 513, 0, 0,
	523, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 198, 0, 0,
	0, 0, 139, 0, 155, 105, 113, 0, 87, 0,
	104, 131, 144, 148, 0, 0, 0, 96, 0, 146,
	135, 167, 0, 136, 145, 117, 159, 140, 166, 199,
	174, 157, 173, 82, 156, 165, 94, 149, 84, 163,
	154, 123, 109, 110, 83, 0, 143, 99, 103, 98,
	132, 160, 161, 97, 182, 88, 172, 86, 89, 171,
	130, 158, 164, 124, 121, 85, 162, 122, 120, 112,
	101, 106, 137, 119, 138, 107, 127, 126, 128, 0,
	0, 0, 153, 169, 183, 91, 0, 0, 175, 176,
	177, 178, 179, 0, 0, 92, 129, 90, 108, 150,
	111, 118, 142, 181, 134, 147, 95, 168, 151, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 0,
	0, 0, 500, 0, 0, 0, 81, 100, 115, 180,
	141, 102, 170, 114, 0, 116, 0, 0, 152, 125,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 79, 0, 502,
	0, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 497, 496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 498, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 198, 0, 0, 0, 0, 139, 0,
	155, 105, 113, 0, 87, 0, 104, 131, 144, 148,
	0, 0, 0, 96, 0, 146, 135, 167, 0, 136,
	145, 117, 159, 140, 166, 199, 174, 157, 173, 82,
	156, 165, 94, 149, 84, 163, 154, 123, 109, 110,
	83, 0, 143, 99, 103, 98, 132, 160, 161, 97,
	182, 88, 172, 86, 89, 171, 130, 158, 164, 124,
	121, 85, 162, 122, 120, 112, 101, 106, 137, 119,
	138, 107, 127, 126, 128, 0, 0, 0, 153, 169,
	183, 91, 0, 0, 175, 176, 177, 178, 179, 0,
	0, 92, 129, 90, 108, 150, 111, 118, 142, 181,
	134, 147, 95, 168, 151, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 133, 0, 0, 0, 0, 0,
	0, 0, 81, 100, 115, 180, 141, 102, 170, 114,
	0, 116, 0, 0, 152, 125, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 79, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 0, 0, 0, 0, 72, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 75, 76, 0, 71,
	0, 0, 0, 77, 139, 0, 155, 105, 113, 0,
	87, 0, 104, 131, 144, 148, 0, 0, 0, 96,
	0, 146, 135, 167, 0, 136, 145, 117, 159, 140,
	166, 73, 174, 157, 173, 82, 156, 165, 94, 149,
	84, 163, 154, 123, 109, 110, 83, 0, 143, 99,
	103, 98, 132, 160, 161, 97, 182, 88, 172, 86,
	89, 171, 130, 158, 164, 124, 121, 85, 162, 122,
	120, 112, 101, 106, 137, 119, 138, 107, 127, 126,
	128, 0, 0, 0, 153, 169, 183, 91, 0, 0,
	175, 176, 177, 178, 179, 0, 0, 92, 129, 90,
	108, 150, 111, 118, 142, 181, 134, 147, 95, 168,
	151, 0, 74, 0, 0, 0, 0, 0, 0, 0,
	133, 0, 0, 0, 597, 0, 0, 0, 81, 100,
	115, 180, 141, 102, 170, 114, 0, 116, 0, 0,
	152, 125, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	0, 599, 0, 0, 0, 0, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 198, 0, 0, 0, 0,
	139, 0, 155, 105, 113, 0, 87, 0, 104, 131,
	144, 148, 0, 0, 0, 96, 0, 146, 135, 167,
	0, 136, 145, 117, 159, 140, 166, 199, 174, 157,
	173, 82, 156, 165, 94, 149, 84, 163, 154, 123,
	109, 110, 83, 0, 143, 99, 103, 98, 132, 160,
	161, 97, 182, 88, 172, 86, 89, 171, 130, 158,
	164, 124, 121, 85, 162, 122, 120, 112, 101, 106,
	137, 119, 138, 107, 127, 126, 128, 0, 0, 0,
	153, 169, 183, 91, 0, 0, 175, 176, 177, 178,
	179, 0, 0, 92, 129, 90, 108, 150, 111, 118,
	142, 181, 134, 147, 95, 168, 151, 0, 0, 0,
	23, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 0, 81, 0, 115, 180, 141, 102,
	170, 100, 0, 0, 0, 0, 0, 114, 0, 116,
	0, 0, 152, 125, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 52, 0,
	0, 79, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 198, 0, 0,
	0, 0, 139, 0, 155, 105, 113, 0, 87, 0,
	104, 131, 144, 148, 0, 0, 0, 96, 0, 146,
	135, 167, 0, 136, 145, 117, 159, 140, 166, 199,
	174, 157, 173, 82, 156, 165, 94, 149, 84, 163,
	154, 123, 109, 110, 83, 0, 143, 99, 103, 98,
	132, 160, 161, 97, 182, 88, 172, 86, 89, 171,
	130, 158, 164, 124, 121, 85, 162, 122, 120, 112,
	101, 106, 137, 119, 138, 107, 127, 126, 128, 0,
	0, 0, 153, 169, 183, 91, 0, 0, 175, 176,
	177, 178, 179, 0, 0, 92, 129, 90, 108, 150,
	111, 118, 142, 181, 134, 147, 95, 168, 151, 0,
	0, 0, 23, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 133, 0, 81, 0, 115, 180,
	141, 102, 170, 100, 0, 0, 0, 0, 0, 114,
	0, 116, 0, 0, 152, 125, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	52, 0, 0, 196, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 198,
	0, 0, 0, 0, 139, 0, 155, 105, 113, 0,
	87, 0, 104, 131, 144, 148, 0, 0, 0, 96,
	0, 146, 135, 167, 0, 136, 145, 117, 159, 140,
	166, 199, 174, 157, 173, 82, 156, 165, 94, 149,
	84, 163, 154, 123, 109, 110, 83, 0, 143, 99,
	103, 98, 132, 160, 161, 97, 182, 88, 172, 86,
	89, 171, 130, 158, 164, 124, 121, 85, 162, 122,
	120, 112, 101, 106, 137, 119, 138, 107, 127, 126,
	128, 0, 0, 0, 153, 169, 183, 91, 0, 0,
	175, 176, 177, 178, 179, 0, 0, 92, 129, 90,
	108, 150, 111, 118, 142, 181, 134, 147, 95, 168,
	151, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 0, 0, 0, 0, 0, 0, 0, 81, 100,
	115, 180, 141, 102, 170, 114, 0, 116, 0, 0,
	152, 125, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 79,
	0, 0, 720, 0, 0, 721, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 198, 0, 0, 0, 0,
	139, 0, 155, 105, 113, 0, 87, 0, 104, 131,
	144, 148, 0, 0, 0, 96, 0, 146, 135, 167,
	0, 136, 145, 117, 159, 140, 166, 199, 174, 157,
	173, 82, 156, 165, 94, 149, 84, 163, 154, 123,
	109, 110, 83, 0, 143, 99, 103, 98, 132, 160,
	161, 97, 182, 88, 172, 86, 89, 171, 130, 158,
	164, 124, 121, 85, 162, 122, 120, 112, 101, 106,
	137, 119, 138, 107, 127, 126, 128, 0, 0, 0,
	153, 169, 183, 91, 0, 0, 175, 176, 177, 178,
	179, 0, 0, 92, 129, 90, 108, 150, 111, 118,
	142, 181, 134, 147, 95, 168, 151, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 0, 81, 0, 115, 180, 141, 102,
	170, 100, 0, 617, 0, 0, 0, 114, 0, 116,
	0, 0, 152, 125, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 79, 0, 616, 0, 0, 0, 0, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 198, 0, 0,
	0, 0, 139, 0, 155, 105, 113, 0, 87, 0,
	104, 131, 144, 148, 0, 0, 0, 96, 0, 146,
	135, 167, 0, 136, 145, 117, 159, 140, 166, 199,
	174, 157, 173, 82, 156, 165, 94, 149, 84, 163,
	154, 123, 109, 110, 83, 0, 143, 99, 103, 98,
	132, 160, 161, 97, 182, 88, 172, 86, 89, 171,
	130, 158, 164, 124, 121, 85, 162, 122, 120, 112,
	101, 106, 137, 119, 138, 107, 127, 126, 128, 0,
	0, 0, 153, 169, 183, 91, 0, 0, 175, 176,
	177, 178, 179, 0, 0, 92, 129, 90, 108, 150,
	111, 118, 142, 181, 134, 147, 95, 168, 151, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 133, 0,
	0, 0, 597, 0, 0, 0, 81, 100, 115, 180,
	141, 102, 170, 114, 0, 116, 0, 0, 152, 125,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 196, 0, 599,
	0, 0, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 198, 0, 0, 0, 0, 139, 0,
	155, 105, 113, 0, 87, 0, 104, 131, 144, 148,
	0, 0, 0, 96, 0, 146, 135, 167, 0, 595,
	145, 117, 159, 140, 166, 199, 174, 157, 173, 82,
	156, 165, 94, 149, 84, 163, 154, 123, 109, 110,
	83, 0, 143, 99, 103, 98, 132, 160, 161, 97,
	182, 88, 172, 86, 89, 171, 130, 158, 164, 124,
	121, 85, 162, 122, 120, 112, 101, 106, 137, 119,
	138, 107, 127, 126, 128, 0, 0, 0, 153, 169,
	183, 91, 0, 0, 175, 176, 177, 178, 179, 0,
	0, 92, 129, 90, 108, 150, 111, 118, 142, 181,
	134, 147, 95, 168, 151, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 133, 0, 0, 0, 0, 0,
	0, 0, 81, 100, 115, 180, 141, 102, 170, 114,
	0, 116, 0, 0, 152, 125, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	52, 0, 0, 196, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 198,
	0, 0, 0, 0, 139, 0, 155, 105, 113, 0,
	87, 0, 104, 131, 144, 148, 0, 0, 0, 96,
	0, 146, 135, 167, 0, 136, 145, 117, 159, 140,
	166, 199, 174, 157, 173, 82, 156, 165, 94, 149,
	84, 163, 154, 123, 109, 110, 83, 0, 143, 99,
	103, 98, 132, 160, 161, 97, 182, 88, 172, 86,
	89, 171, 130, 158, 164, 124, 121, 85, 162, 122,
	120, 112, 101, 106, 137, 119, 138, 107, 127, 126,
	128, 0, 0, 0, 153, 169, 183, 91, 0, 0,
	175, 176, 177, 178, 179, 0, 0, 92, 129, 90,
	108, 150, 111, 118, 142, 181, 134, 147, 95, 168,
	151, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 0, 0, 0, 0, 0, 0, 0, 81, 100,
	115, 180, 141, 102, 170, 114, 0, 116, 0, 0,
	152, 125, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	0, 599, 0, 0, 0, 0, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 198, 0, 0, 0, 0,
	139, 0, 155, 105, 113, 0, 87, 0, 104, 131,
	144, 148, 0, 0, 0, 96, 0, 146, 135, 167,
	0, 136, 145, 117, 159, 140, 166, 199, 174, 157,
	173, 82, 156, 165, 94, 149, 84, 163, 154, 123,
	109, 110, 83, 0, 143, 99, 103, 98, 132, 160,
	161, 97, 182, 88, 172, 86, 89, 171, 130, 158,
	164, 124, 121, 85, 162, 122, 120, 112, 101, 106,
	137, 119, 138, 107, 127, 126, 128, 0, 0, 0,
	153, 169, 183, 91, 0, 0, 175, 176, 177, 178,
	179, 0, 0, 92, 129, 90, 108, 150, 111, 118,
	142, 181, 134, 147, 95, 168, 151, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 133, 0, 0, 0,
	0, 0, 0, 0, 81, 100, 115, 180, 141, 102,
	170, 114, 0, 116, 0, 0, 152, 125, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 79, 0, 502, 0, 0,
	0, 0, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 198, 0, 0, 0, 0, 139, 0, 155, 105,
	113, 0, 87, 0, 104, 131, 144, 148, 0, 0,
	0, 96, 0, 146, 135, 167, 0, 136, 145, 117,
	159, 140, 166, 199, 174, 157, 173, 82, 156, 165,
	94, 149, 84, 163, 154, 123, 109, 110, 83, 0,
	143, 99, 103, 98, 132, 160, 161, 97, 182, 88,
	172, 86, 89, 171, 130, 158, 164, 124, 121, 85,
	162, 122, 120, 112, 101, 106, 137, 119, 138, 107,
	127, 126, 128, 0, 0, 0, 153, 169, 183, 91,
	0, 0, 175, 176, 177, 178, 179, 0, 0, 92,
	129, 90, 108, 150, 111, 118, 142, 181, 134, 147,
	95, 168, 151, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 133,
	81, 0, 115, 180, 141, 102, 170, 575, 100, 0,
	0, 0, 0, 0, 114, 0, 116, 0, 0, 152,
	125, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 0, 0, 0, 0, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 198, 0, 0, 0, 0, 139,
	0, 155, 105, 113, 0, 87, 0, 104, 131, 144,
	148, 0, 0, 0, 96, 0, 146, 135, 167, 0,
	136, 145, 117, 159, 140, 166, 199, 174, 157, 173,
	82, 156, 165, 94, 149, 84, 163, 154, 123, 109,
	110, 83, 0, 143, 99, 103, 98, 132, 160, 161,
	97, 182, 88, 172, 86, 89, 171, 130, 158, 164,
	124, 121, 85, 162, 122, 120, 112, 101, 106, 137,
	119, 138, 107, 127, 126, 128, 0, 0, 0, 153,
	169, 183, 91, 0, 0, 175, 176, 177, 178, 179,
	0, 0, 92, 129, 90, 108, 150, 111, 118, 142,
	181, 134, 147, 95, 168, 151, 0, 0, 317, 0,
	0, 0, 0, 0, 0, 133, 0, 0, 0, 0,
	0, 0, 0, 81, 100, 115, 180, 141, 102, 170,
	114, 0, 116, 0, 0, 152, 125, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 196, 0, 0, 0, 0, 0,
	0, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	198, 0, 0, 0, 0, 139, 0, 155, 105, 113,
	0, 87, 0, 104, 131, 144, 148, 0, 0, 0,
	96, 0, 146, 135, 167, 0, 136, 145, 117, 159,
	140, 166, 199, 174, 157, 173, 82, 156, 165, 94,
	149, 84, 163, 154, 123, 109, 110, 83, 0, 143,
	99, 103, 98, 132, 160, 161, 97, 182, 88, 172,
	86, 89, 171, 130, 158, 164, 124, 121, 85, 162,
	122, 120, 112, 101, 106, 137, 119, 138, 107, 127,
	126, 128, 0, 0, 0, 153, 169, 183, 91, 0,
	0, 175, 176, 177, 178, 179, 0, 0, 92, 129,
	90, 108, 150, 111, 118, 142, 181, 134, 147, 95,
	168, 151, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 133, 0, 0, 0, 0, 0, 0, 0, 81,
	100, 115, 180, 141, 102, 170, 114, 0, 116, 0,
	0, 152, 125, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	196, 0, 0, 0, 0, 0, 0, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 198, 0, 0, 0,
	0, 139, 0, 155, 105, 113, 0, 87, 0, 104,
	131, 144, 148, 0, 0, 0, 96, 0, 146, 135,
	167, 0, 136, 145, 117, 159, 140, 166, 199, 174,
	157, 173, 82, 156, 165, 94, 149, 84, 163, 154,
	123, 109, 110, 83, 0, 143, 99, 103, 98, 132,
	160, 161, 97, 182, 88, 172, 86, 89, 171, 130,
	158, 164, 124, 121, 85, 162, 122, 120, 112, 101,
	106, 137, 119, 138, 107, 127, 126, 128, 0, 0,
	0, 153, 169, 183, 91, 0, 0, 175, 176, 177,
	178, 179, 0, 0, 92, 129, 90, 108, 150, 111,
	118, 142, 181, 134, 147, 95, 168, 151, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 0, 0,
	0, 0, 0, 0, 0, 81, 100, 115, 180, 141,
	102, 170, 114, 0, 116, 0, 0, 152, 125, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 79, 0, 0, 0,
	0, 0, 0, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 198, 0, 0, 0, 0, 139, 0, 155,
	105, 113, 0, 87, 0, 104, 131, 144, 148, 0,
	0, 0, 96, 0, 146, 135, 167, 0, 136, 145,
	117, 159, 140, 166, 199, 174, 157, 173, 82, 156,
	165, 94, 149, 84, 163, 154, 123, 109, 110, 83,
	0, 143, 99, 103, 98, 132, 160, 161, 97, 182,
	88, 172, 86, 89, 171, 130, 158, 164, 124, 121,
	85, 162, 122, 120, 112, 101, 106, 137, 119, 138,
	107, 127, 126, 128, 0, 0, 0, 153, 169, 183,
	91, 0, 0, 175, 176, 177, 178, 179, 0, 0,
	92, 129, 90, 108, 150, 111, 118, 142, 181, 134,
	147, 95, 168, 151, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 133, 0, 0, 0, 0, 0, 0,
	0, 81, 100, 115, 180, 141, 102, 170, 114, 0,
	116, 0, 0, 152, 125, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 0, 0, 0, 0, 0, 0, 0,
	0, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 198, 0,
	0, 0, 0, 139, 0, 155, 105, 113, 0, 87,
	0, 104, 131, 144, 148, 0, 0, 0, 96, 0,
	146, 135, 167, 0, 136, 145, 117, 159, 140, 166,
	199, 174, 157, 173, 82, 156, 165, 94, 149, 84,
	163, 154, 123, 109, 110, 83, 0, 143, 99, 103,
	98, 132, 160, 161, 97, 182, 88, 172, 86, 89,
	171, 130, 158, 164, 124, 121, 85, 162, 122, 120,
	112, 101, 106, 137, 119, 138, 107, 127, 126, 128,
	0, 0, 0, 153, 169, 183, 91, 0, 0, 175,
	176, 177, 178, 179, 0, 0, 92, 129, 90, 108,
	150, 111, 118, 142, 181, 134, 147, 95, 168, 151,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 133,
	0, 0, 0, 0, 0, 0, 0, 81, 100, 115,
	180, 141, 102, 170, 114, 0, 116, 0, 0, 152,
	125, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 253, 0,
	0, 0, 0, 0, 0, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 198, 0, 0, 0, 0, 139,
	0, 155, 105, 113, 0, 87, 0, 104, 131, 144,
	148, 0, 0, 0, 96, 0, 146, 135, 167, 0,
	136, 145, 117, 159, 140, 166, 199, 174, 157, 173,
	82, 156, 165, 94, 149, 84, 163, 154, 123, 109,
	110, 83, 0, 143, 99, 103, 98, 132, 160, 161,
	97, 182, 88, 172, 86, 89, 171, 130, 158, 164,
	124, 121, 85, 162, 122, 120, 112, 101, 106, 137,
	119, 138, 107, 127, 126, 128, 0, 0, 0, 153,
	169, 183, 91, 0, 0, 175, 176, 177, 178, 179,
	0, 0, 92, 129, 90, 108, 150, 111, 118, 142,
	181, 134, 147, 95, 168, 151, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 0, 115, 180, 141, 102, 170,
}
var yyPact = [...]int{

	2041, -1000, -172, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 880, 932, -1000, -1000, -1000, -1000, -1000, -1000, 224,
	7636, 86, 97, 39, 10373, 96, 124, 10825, -1000, 9,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -77, -78, 699,
	-1000, -1000, -1000, -1000, -1000, 862, 878, 706, 857, 793,
	-1000, 5762, 59, 9236, 10147, 5039, -1000, -1000, 204, 10825,
	92, 10825, -144, 10599, 56, 56, 56, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 94, 10825, -1000, 10825, 51, 491,
	51, 51, 51, 10825, -1000, 130, -1000, -1000, -1000, -1000,
	10825, 487, 817, 45, 3007, 3007, 3007, 3007, 14, 3007,
	-65, 734, 912, -1000, -1000, -1000, -1000, -1000, 3007, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 437, 830, 6488, 6488, 880, -1000, 699, -1000, -1000,
	-1000, 815, -1000, -1000, 289, 920, -1000, 7410, 128, -1000,
	6488, 1587, 653, -1000, -1000, 653, -1000, -1000, 109, -1000,
	-1000, 6952, 6952, 6952, 6952, 6952, 6952, 6952, 6952, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 653, -1000, 6247, 653, 653, 653, 653,
	653, 653, 653, 653, 6488, 653, 653, 653, 653, 653,
	653, 653, 653, 653, 653, 653, 653, 653, 9921, 662,
	814, -1000, -1000, -1000, 852, 8326, 9010, 10825, 642, -1000,
	628, 4785, -111, -1000, -1000, -1000, 234, 8784, -1000, -1000,
	-1000, 813, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 588, 10825, -1000, 2138,
	-1000, 483, 3007, 79, 663, 465, 247, 463, 10825, 10825,
	3007, 73, 10825, 850, 732, 10825, 452, 449, -1000, 4531,
	-1000, 3007, 3007, 3007, 3007, 3007, 3007, 3007, 3007, -1000,
	-1000, -1000, -1000, -1000, -1000, 3007, 3007, -1000, 914, 233,
	-1000, -1000, 10825, 6488, -1000, -1000, -1000, -1000, -1000, -1000,
	925, 166, 376, 126, 643, -1000, 436, 862, 437, 793,
	8552, 772, -1000, -1000, 10825, -1000, 6488, 6488, 519, -1000,
	9688, -1000, -1000, 3515, 177, 6952, 296, 277, 6952, 6952,
	6952, 6952, 6952, 6952, 6952, 6952, 6952, 6952, 6952, 6952,
	6952, 6952, 6952, 385, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 442, -1000, 699, 987, 987, 137, 137, 137,
	137, 137, 137, 137, 7184, 5280, 437, 580, 196, 6247,
	5762, 5762, 6488, 6488, 11051, 11051, 5762, 854, 246, 196,
	11051, -1000, 437, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	5762, 5762, 5762, 5762, 29, 10825, -1000, 11051, 9236, 9236,
	9236, 9236, 9236, -1000, 778, 774, -1000, 771, 770, 784,
	10825, -1000, 553, 8326, 139, 653, -1000, 9462, -1000, -1000,
	29, 566, 9236, 10825, -1000, -1000, 4277, 628, -111, 591,
	-1000, -95, -116, 6003, 136, -1000, -1000, -1000, -1000, 2753,
	269, 510, 308, -55, -1000, -1000, -1000, 666, -1000, 666,
	666, 666, 666, -21, -21, -21, -21, -1000, -1000, -1000,
	-1000, -1000, 694, 685, -1000, 666, 666, 666, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 678, 678, 678, 667, 667, 684,
	-1000, 10825, -160, 440, 3007, 849, 3007, -1000, 76, -1000,
	10825, -1000, -1000, 10825, 3007, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	10825, 258, 10825, 10825, -1000, 196, -1000, 797, 6488, 6488,
	4023, 6488, -1000, -1000, -1000, 830, -1000, 854, 902, -1000,
	807, 805, 5762, -1000, -1000, 177, 265, -1000, -1000, 400,
	-1000, -1000, -1000, -1000, 118, 653, -1000, 1523, -1000, -1000,
	-1000, -1000, 296, 6952, 6952, 6952, 679, 1523, 1682, 381,
	1704, 137, 152, 152, 153, 153, 153, 153, 153, 321,
	321, -1000, -1000, -1000, 437, -1000, -1000, -1000, 437, 5762,
	592, -1000, -1000, 6488, -1000, 437, 546, 546, 274, 528,
	691, -1000, 117, 689, 546, 5762, 303, -1000, 6488, 437,
	-1000, 546, 437, 546, 546, 584, 653, -1000, 687, -1000,
	198, 814, 709, 717, 1067, -1000, -1000, -1000, -1000, 716,
	-1000, 701, -1000, -1000, -1000, -1000, -1000, 91, 90, 81,
	10599, -1000, 908, 9236, 664, -1000, -1000, 591, -111, -81,
	-1000, -1000, -1000, 196, -1000, 392, 590, 2499, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 675, 433, -1000, 839, 188,
	192, 431, 837, -1000, -1000, -1000, 819, -1000, 276, -61,
	-1000, -1000, 346, -21, -21, -1000, -1000, 136, 812, 136,
	136, 136, 375, 375, -1000, -1000, -1000, -1000, 343, -1000,
	-1000, -1000, 340, -1000, 715, 10599, 3007, -1000, 3769, -1000,
	-1000, -1000, -1000, -1000, -1000, 243, 176, 208, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 27,
	-1000, 3007, -1000, 233, -1000, 371, 6488, -1000, -1000, 792,
	196, 196, 116, -1000, -1000, 10825, -1000, -1000, -1000, -1000,
	683, -1000, -1000, -1000, 3261, 5762, -1000, 679, 1523, 1498,
	-1000, 6952, 6952, -1000, -1000, 546, 5762, 196, -1000, -1000,
	-1000, 319, 385, 319, 6952, 6952, 4023, 6952, 6952, -155,
	555, 193, -1000, 6488, 471, -1000, -1000, -1000, -1000, -1000,
	714, 11051, 653, -1000, 8094, 10599, 880, 11051, 6488, 6488,
	-1000, -1000, 6488, 674, -1000, 6488, -1000, -1000, -1000, 653,
	653, 653, 502, -1000, 880, 664, -1000, -1000, -1000, -120,
	-126, -1000, -1000, -1000, 2753, -1000, 2753, 10599, 44, -1000,
	431, 431, -1000, -1000, -1000, 671, 712, 84, -1000, -1000,
	-1000, 504, 136, 136, -1000, 178, -1000, -1000, -1000, 540,
	-1000, 522, 577, 518, 10825, -1000, -1000, 568, -1000, 195,
	-1000, -1000, 10599, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 10599, 10825, -1000, -1000, -1000,
	-1000, -1000, 10599, -1000, 258, -1000, 196, -1000, 3769, -1000,
	908, 9236, -1000, -1000, 437, -1000, 6952, 1523, 1523, -1000,
	-1000, 437, 666, 666, -1000, 666, 667, -1000, 666, 0,
	666, -2, 437, 437, 1343, 1465, -1000, 1251, 808, 653,
	-151, -1000, 196, 6488, -1000, 843, 599, 542, -1000, -1000,
	5521, 437, 509, 113, 502, 862, -1000, 196, 196, 196,
	10599, 196, 10599, 10599, 10599, 7862, 10599, 862, -1000, -1000,
	-1000, -1000, 2499, -1000, 499, -1000, 666, -1000, -1000, -1000,
	10599, -48, 924, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -21, 370, -21, 335, -1000, 330,
	3007, 3769, 2753, -1000, 661, -1000, -1000, -1000, -1000, 845,
	-1000, 904, 560, -1000, 1523, -1000, -1000, 107, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 6952, 6952, -1000,
	6952, 6952, 6952, 437, 366, 196, 825, -1000, 653, -1000,
	-1000, 672, 10599, 10599, -1000, -1000, 474, -1000, 470, 470,
	470, 139, -1000, -1000, 134, 10599, -1000, 460, 168, -1000,
	-131, 136, -1000, 136, 495, 475, -1000, -1000, -1000, 10599,
	653, 882, 877, -1000, -1000, 1441, 1441, 1441, 1441, 28,
	-1000, -1000, 923, -1000, 653, -1000, 699, 112, -1000, 10599,
	-1000, -1000, -1000, -1000, -1000, 134, -1000, 406, 191, 357,
	-1000, 41, 267, 824, -1000, 816, -1000, -1000, -1000, -1000,
	-1000, 456, 26, -1000, 6488, 6488, -1000, -1000, -1000, -1000,
	437, 49, -163, 11051, 542, 437, 10599, -1000, -1000, -1000,
	317, -1000, -1000, 10825, -1000, 348, -1000, -1000, 663, 416,
	-1000, 10599, 196, 538, -1000, 786, -158, -168, 529, -1000,
	-1000, -1000, 660, -1000, -160, -1000, 26, 803, -1000, 783,
	-1000, 10599, -1000, -1000, 23, -161, 382, 21, -164, 700,
	653, -169, 693, -1000, 919, 6720, -1000, -1000, 921, 155,
	155, 1441, 437, -1000, -1000, -1000, 50, 334, -1000, -1000,
	-1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1201, 36, 465, 1200, 1199, 1198, 1197, 1196, 1193,
	1191, 1190, 1185, 1184, 1183, 1177, 1176, 1175, 1174, 1173,
	1172, 1171, 1166, 1164, 112, 1159, 1158, 1156, 84, 1148,
	82, 1146, 1145, 40, 60, 41, 39, 445, 1139, 26,
	58, 110, 1137, 50, 1135, 1134, 83, 1132, 59, 1122,
	1118, 46, 1108, 1100, 15, 43, 1096, 1095, 1094, 1093,
	69, 146, 1091, 1080, 1078, 1077, 1076, 1075, 55, 9,
	12, 11, 14, 1073, 45, 7, 1071, 53, 1070, 1068,
	1067, 1066, 33, 1065, 56, 1064, 22, 54, 1061, 6,
	73, 28, 21, 8, 71, 62, 1060, 25, 63, 47,
	1058, 1052, 369, 1051, 1044, 49, 1040, 27, 165, 359,
	1034, 1031, 1030, 1027, 52, 0, 814, 575, 68, 1026,
	1025, 1018, 1323, 67, 75, 17, 1017, 32, 80, 34,
	1016, 1015, 29, 1014, 1013, 1012, 1006, 1002, 1001, 1000,
	103, 997, 996, 993, 51, 13, 991, 990, 57, 20,
	989, 988, 982, 44, 61, 981, 974, 48, 30, 973,
	971, 966, 965, 964, 24, 16, 954, 10, 953, 18,
	952, 23, 951, 2, 950, 19, 949, 5, 948, 4,
	42, 1, 947, 3, 946, 945, 503, 375, 941, 940,
	85,
}
var yyR1 = [...]int{

	0, 184, 185, 185, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 6, 3, 4, 4,
	5, 5, 7, 7, 27, 27, 8, 9, 9, 9,
	188, 188, 46, 46, 90, 90, 10, 10, 10, 10,
	95, 95, 99, 99, 99, 100, 100, 100, 100, 130,
	130, 11, 11, 11, 11, 11, 11, 11, 11, 179,
	179, 178, 177, 177, 176, 176, 175, 16, 160, 162,
	162, 161, 161, 161, 161, 154, 133, 133, 133, 133,
	136, 136, 134, 134, 134, 134, 134, 134, 134, 135,
	135, 135, 135, 135, 137, 137, 137, 137, 137, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 139, 139, 139, 139, 139, 139,
	139, 139, 153, 153, 140, 140, 148, 148, 149, 149,
	149, 146, 146, 147, 147, 150, 150, 150, 141, 141,
	141, 141, 141, 141, 141, 143, 143, 151, 151, 144,
	144, 144, 145, 145, 145, 152, 152, 152, 152, 152,
	142, 142, 155, 155, 170, 170, 169, 169, 169, 159,
	159, 158, 158, 166, 166, 166, 166, 166, 157, 157,
	168, 168, 167, 156, 156, 171, 171, 171, 171, 182,
	183, 181, 181, 181, 181, 181, 163, 163, 163, 164,
	164, 164, 165, 165, 165, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 180, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 174, 172, 172, 173, 173,
	13, 14, 14, 14, 14, 14, 15, 15, 17, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 106, 106, 104, 104,
	105, 105, 105, 107, 107, 107, 131, 131, 131, 19,
	19, 21, 21, 22, 23, 20, 20, 20, 20, 20,
	20, 20, 189, 24, 25, 25, 26, 26, 26, 30,
	30, 30, 28, 28, 29, 29, 35, 35, 34, 34,
	36, 36, 36, 36, 119, 119, 119, 118, 118, 38,
	38, 39, 39, 40, 40, 41, 41, 41, 53, 53,
	89, 89, 91, 91, 42, 42, 42, 42, 43, 43,
	44, 44, 45, 45, 126, 126, 125, 125, 125, 124,
	124, 47, 47, 47, 49, 48, 48, 48, 48, 50,
	50, 52, 52, 51, 51, 54, 54, 54, 54, 55,
	55, 37, 37, 37, 37, 37, 37, 37, 103, 103,
	57, 57, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 67, 67, 67, 67, 67, 67, 58, 58,
	58, 58, 58, 58, 58, 33, 33, 68, 68, 68,
	74, 69, 69, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 65, 65, 65, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 64, 64, 64, 64, 64, 64, 64,
	64, 190, 190, 66, 66, 66, 66, 31, 31, 31,
	31, 31, 129, 129, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 78, 78, 32,
	32, 76, 76, 77, 79, 79, 75, 75, 75, 60,
	60, 60, 60, 60, 60, 60, 60, 62, 62, 62,
	80, 80, 81, 81, 82, 82, 83, 83, 84, 85,
	85, 85, 86, 86, 86, 86, 87, 87, 87, 59,
	59, 59, 59, 59, 59, 88, 88, 88, 88, 92,
	92, 70, 70, 72, 72, 71, 73, 93, 93, 97,
	94, 94, 98, 98, 98, 96, 96, 96, 121, 121,
	121, 101, 101, 108, 108, 109, 109, 102, 102, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 111,
	111, 111, 112, 112, 113, 113, 113, 120, 120, 116,
	116, 117, 117, 122, 122, 123, 123, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 186, 187, 127, 128, 128,
	128,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 4, 6, 7, 5, 10, 1, 3,
	1, 3, 7, 8, 1, 1, 8, 8, 7, 6,
	1, 1, 1, 3, 0, 4, 3, 4, 5, 4,
	1, 3, 3, 2, 2, 2, 2, 2, 1, 1,
	1, 2, 2, 8, 4, 6, 5, 5, 5, 0,
	2, 1, 0, 2, 1, 3, 3, 4, 4, 2,
	4, 1, 3, 3, 3, 8, 3, 1, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 2, 2, 2, 1, 4,
	4, 2, 2, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 6, 6, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 3, 0, 5, 0, 3,
	5, 0, 1, 0, 1, 0, 1, 2, 0, 2,
	2, 2, 2, 2, 2, 0, 3, 0, 1, 0,
	3, 3, 0, 2, 2, 0, 2, 1, 2, 1,
	0, 2, 5, 4, 1, 2, 2, 3, 2, 0,
	1, 1, 0, 2, 3, 3, 2, 2, 1, 1,
	1, 3, 2, 3, 1, 10, 11, 11, 12, 3,
	3, 1, 1, 2, 2, 2, 0, 1, 3, 1,
	2, 3, 1, 1, 1, 6, 7, 7, 12, 7,
	7, 7, 4, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 7, 1, 3, 8, 8,
	5, 4, 6, 5, 4, 4, 3, 2, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 3, 3, 3,
	3, 4, 3, 7, 5, 4, 2, 2, 4, 4,
	2, 2, 2, 2, 2, 3, 1, 1, 0, 1,
	0, 2, 2, 0, 2, 2, 0, 1, 1, 2,
	1, 1, 2, 1, 1, 2, 2, 2, 2, 2,
	3, 3, 0, 2, 0, 2, 1, 2, 2, 0,
	1, 1, 0, 1, 0, 1, 0, 1, 1, 3,
	1, 2, 3, 5, 0, 1, 2, 1, 1, 0,
	2, 1, 3, 1, 1, 1, 3, 3, 3, 7,
	1, 3, 1, 3, 4, 4, 4, 3, 2, 4,
	0, 1, 0, 2, 0, 1, 0, 1, 2, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 0, 5, 5, 5, 0,
	2, 1, 3, 3, 2, 3, 1, 2, 0, 3,
	1, 1, 3, 3, 4, 4, 5, 3, 4, 5,
	6, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 2, 2, 2, 2, 2,
	3, 1, 1, 1, 1, 4, 5, 6, 4, 4,
	6, 6, 6, 6, 8, 8, 6, 8, 8, 9,
	7, 5, 4, 2, 2, 2, 2, 2, 2, 2,
	2, 0, 2, 4, 4, 4, 4, 0, 3, 4,
	7, 3, 1, 1, 2, 3, 3, 1, 2, 2,
	1, 2, 1, 2, 2, 1, 2, 0, 1, 0,
	2, 1, 2, 4, 0, 2, 1, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	0, 3, 0, 2, 0, 3, 1, 3, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 2, 4, 2,
	1, 3, 5, 4, 6, 1, 3, 3, 5, 0,
	5, 1, 3, 1, 2, 3, 1, 1, 3, 3,
	1, 3, 3, 3, 3, 1, 2, 1, 1, 1,
	1, 1, 1, 0, 2, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 0, 1, 1, 0, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	1,
}
var yyChk = [...]int{

	-1000, -184, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 30, -16,
	114, 115, 117, 116, 147, 118, 140, 50, 159, 160,
	162, 163, 25, 141, 142, 145, 146, 31, 32, -186,
	8, 244, 54, -185, 259, -82, 15, -26, 5, -24,
	-189, -24, -24, -24, -24, -24, -160, -162, 54, 89,
	-113, 123, 71, 155, 236, 120, 121, 127, -116, 57,
	-115, 252, 159, 170, 164, 191, 183, 134, 181, 184,
	223, 211, 221, 66, 162, 232, 143, 179, 175, 173,
	27, 196, 257, 174, 136, 131, 197, 201, 224, 168,
	169, 226, 195, 132, 33, 254, 35, 151, 227, 199,
	194, 190, 193, 167, 189, 39, 203, 202, 204, 222,
	186, 137, 176, 18, 230, 146, 149, 198, 200, 128,
	153, 256, 228, 172, 138, 150, 145, 231, 139, 163,
	225, 234, 38, 208, 166, 130, 160, 157, 187, 152,
	177, 178, 192, 165, 188, 161, 154, 147, 233, 209,
	258, 185, 182, 158, 156, 214, 215, 216, 217, 218,
	255, 229, 180, 210, -102, 123, 125, 121, 121, 122,
	123, 236, 120, 121, -51, -122, 57, -115, 123, 155,
	121, 107, 184, 114, 212, 122, 33, 153, -131, 121,
	-104, 156, 211, 214, 215, 216, 218, 217, 57, 225,
	224, 219, -122, 161, -127, -127, -127, -127, -127, 213,
	213, -2, -86, 17, 16, -5, -3, -186, 6, 20,
	21, -30, 40, 41, -25, -36, 98, -37, -122, -56,
	73, -61, 29, 57, -115, 23, -60, -57, -75, -73,
	-74, 107, 108, 109, 96, 97, 104, 74, 110, -65,
	-63, -64, -66, 59, 58, 67, 60, 61, 62, 63,
	68, 69, 70, -116, -71, -186, 44, 45, 245, 246,
	247, 248, 251, 249, 76, 34, 235, 243, 242, 241,
	239, 240, 237, 238, 126, 236, 102, 244, -102, -39,
	-40, -41, -42, -53, -74, -186, -51, 11, -46, -51,
	-94, -130, 161, -98, 225, 224, -117, -96, -116, -114,
	223, 184, 222, 119, 72, 22, 24, 206, 75, 107,
	16, 76, 106, 245, 114, 48, 237, 238, 235, 247,
	248, 236, 212, 29, 10, 25, 141, 21, 100, 116,
	79, 80, 144, 23, 142, 70, 19, 51, 11, 13,
	14, 126, 125, 91, 122, 46, 8, 110, 26, 88,
	42, 28, 44, 89, 17, 239, 240, 31, 251, 148,
	102, 49, 36, 73, 68, 52, 71, 15, 47, 90,
	117, 244, 45, 120, 6, 250, 30, 140, 43, 121,
	213, 78, 124, 69, 5, 127, 32, 9, 50, 53,
	241, 242, 243, 34, 77, 12, -161, 89, -154, 57,
	-51, 122, -51, 244, -116, -109, 126, -109, -109, 121,
	-51, -51, -108, 126, 57, -108, -108, -108, -51, 111,
	-51, 57, 30, 236, 57, 153, 121, 154, 123, -128,
	-186, -117, -128, -128, -128, 157, 158, -128, 221, -106,
	213, 220, 52, 12, -128, -127, -127, -187, 56, -87,
	19, 31, -37, -122, -83, -84, -37, -82, -2, -24,
	36, -28, 21, 65, 11, -119, 72, 71, 88, -118,
	22, -116, 59, 111, -37, -58, 91, 73, 89, 90,
	75, 93, 92, 103, 96, 97, 98, 99, 100, 101,
	102, 94, 95, 106, 81, 82, 83, 84, 85, 86,
	87, -103, -186, -74, -186, 112, 113, -61, -61, -61,
	-61, -61, -61, -61, -61, -186, -2, -69, -37, -186,
	-186, -186, -186, -186, -186, -186, -186, -186, -78, -37,
	-186, -190, -186, -190, -190, -190, -190, -190, -190, -190,
	-186, -186, -186, -186, -52, 26, -51, 30, 55, -47,
	-49, -48, -50, 42, 46, 48, 43, 44, 45, 49,
	-126, 22, -39, -186, -125, 149, -124, 22, -122, 59,
	-51, -46, -188, 55, 11, 53, 55, -94, 161, -95,
	-99, 226, 228, 81, -121, -116, 59, 29, 30, 56,
	55, -51, -133, -136, -138, -137, -139, -134, -135, 181,
	182, 107, 185, 187, 188, 189, 190, 191, 192, 193,
	194, 195, 196, 30, 143, 177, 178, 179, 180, 197,
	198, 199, 200, 201, 202, 203, 204, 164, 165, 166,
	167, 168, 169, 170, 172, 173, 174, 175, 176, 57,
	-128, 123, -179, 53, 57, 73, 57, -51, -51, -128,
	124, -51, 23, 52, -51, 57, 57, -123, -122, -114,
	-128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
	11, -105, 11, 91, -51, -37, 9, 91, 55, 18,
	111, 55, -85, 24, 25, -86, -187, -30, -62, -116,
	60, 63, -29, 43, -51, -37, -37, -67, 68, 73,
	69, 70, -118, 98, -123, -117, -114, -61, -68, -71,
	-74, 64, 91, 89, 90, 75, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -129, 57, 59, 57, -60, -60, -116, -35, 21,
	-34, -36, -187, 55, -187, -2, -34, -34, -37, -37,
	-75, -116, -122, -75, -34, -28, -76, -77, 77, -75,
	-187, -34, -35, -34, -34, -90, 149, -51, -93, -97,
	-75, -40, -41, -41, -40, -41, 42, 42, 42, 47,
	42, 47, 42, -48, -122, -187, -54, 50, 125, 51,
	-186, -124, -90, 53, -39, -51, -98, -95, 55, 227,
	229, 230, 52, -37, -145, 106, -163, -164, -165, -117,
	59, 60, -154, -155, -156, -166, 135, -171, 128, 130,
	127, -157, 136, 122, 28, 56, -150, 68, 73, -146,
	209, -140, 54, -140, -140, -140, -140, -144, 184, -144,
	-144, -144, 54, 54, -140, -140, -140, -148, 54, -148,
	-148, -149, 54, -149, -120, 53, -51, -177, 255, -178,
	57, -128, 23, -128, -110, 119, 116, 117, -174, 115,
	206, 184, 66, 29, 15, 245, 149, 258, 57, 150,
	-51, -51, -128, -51, -107, 89, 12, -122, -122, 38,
	-37, -37, -123, -84, -87, -101, 19, 11, 34, 34,
	-34, 68, 69, 70, 111, -186, -68, -61, -61, -61,
	-33, 144, 72, -187, -187, -34, 55, -37, -187, -187,
	-187, 55, 53, 22, 55, 11, 111, 55, 11, -187,
	-34, -79, -77, 79, -37, -187, -187, -187, -187, -187,
	-59, 30, 34, -2, -186, -186, -55, 55, 12, 81,
	-44, -43, 52, 53, -45, 52, -43, 42, 42, 122,
	122, 122, -91, -116, -55, -39, -55, -99, -100, 231,
	228, 234, 57, 59, 55, -165, 81, 54, 57, 28,
	-157, -157, -158, 57, -158, 28, -141, 29, 68, -147,
	210, 60, -144, -144, -145, 30, -145, -145, -145, -153,
	59, -153, 60, 60, 52, -116, -128, -176, -175, -117,
	-127, -180, 155, 129, 135, 136, 131, 57, 122, 28,
	128, 130, 149, 127, -180, 155, -111, -112, 124, 22,
	122, 28, 149, -128, -105, 59, -37, 39, 111, -51,
	-38, 11, 98, -117, -35, -33, 72, -61, -61, -187,
	-36, -132, 107, 181, 143, 179, 175, 195, 186, 208,
	177, 209, -129, -132, -61, -61, -117, -61, -61, 252,
	-82, 80, -37, 78, -92, 52, -93, -70, -72, -71,
	-186, -2, -88, -116, -91, -82, -97, -37, -37, -37,
	54, -37, -186, -186, -186, -187, 55, -82, -55, 228,
	232, 233, -164, -165, -168, -167, -116, -171, -158, -158,
	54, -143, 52, 59, 60, 61, 68, 235, 67, 56,
	-145, -145, 57, 107, 56, 55, 56, 55, 56, 55,
	-51, 55, 81, -127, -116, -127, -116, -51, -127, -116,
	-107, -55, -39, -187, -61, -187, -140, -140, -140, -149,
	-140, 169, -140, 169, -187, -187, -187, 55, 19, -187,
	55, 19, -186, -32, 250, -37, 27, -92, 55, -187,
	-187, -187, 55, 111, -187, -86, -89, -116, -89, -89,
	-89, -125, -116, -86, 56, 55, -140, -89, -151, 206,
	9, -144, 59, -144, 60, 60, -128, -175, -165, 54,
	26, -80, 13, -144, 57, -61, -61, -61, -61, -61,
	-187, 59, 28, -72, 34, -2, -186, -116, -116, 55,
	56, -187, -187, -187, -54, -170, -169, 53, 132, 66,
	-167, 56, -152, 128, 28, 127, 235, -145, -145, 56,
	56, -89, -186, -81, 14, 16, -187, -187, -187, -187,
	-31, 91, 255, 9, -70, -2, 111, -116, -169, 57,
	-159, 81, 59, 138, -142, 66, 28, 28, 56, -172,
	-173, 149, -37, -69, -187, 253, 49, 256, -93, -187,
	-116, 60, -51, 59, -179, -187, 55, -116, 39, 254,
	257, 54, -177, -173, 34, 39, -89, 151, 255, 56,
	152, 256, -182, -183, 52, -186, 257, -183, 52, 10,
	9, -61, 148, -181, 139, 134, 137, 30, -181, -187,
	-187, 133, 29, 68,
}
var yyDef = [...]int{

	22, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 534, 0, 302, 302, 302, 302, 302, 302, 0,
	604, 587, 0, 0, 0, 0, -2, 290, 291, 0,
	293, 294, 817, 817, 817, 817, 817, 0, 0, 0,
	34, 35, 815, 1, 3, 542, 0, 0, 306, 309,
	304, 0, 587, 0, 0, 0, 61, 62, 0, 0,
	0, 803, 0, 804, 585, 585, 585, 605, 606, 609,
	610, 710, 711, 712, 713, 714, 715, 716, 717, 718,
	719, 720, 721, 722, 723, 724, 725, 726, 727, 728,
	729, 730, 731, 732, 733, 734, 735, 736, 737, 738,
	739, 740, 741, 742, 743, 744, 745, 746, 747, 748,
	749, 750, 751, 752, 753, 754, 755, 756, 757, 758,
	759, 760, 761, 762, 763, 764, 765, 766, 767, 768,
	769, 770, 771, 772, 773, 774, 775, 776, 777, 778,
	779, 780, 781, 782, 783, 784, 785, 786, 787, 788,
	789, 790, 791, 792, 793, 794, 795, 796, 797, 798,
	799, 800, 801, 802, 805, 806, 807, 808, 809, 810,
	811, 812, 813, 814, 0, 0, 588, 0, 583, 0,
	583, 583, 583, 0, 247, 373, 613, 614, 803, 804,
	0, 0, 0, 0, 818, 818, 818, 818, 0, 818,
	0, 266, 267, 270, 271, 272, 273, 274, 818, 287,
	288, 279, 289, 292, 295, 296, 297, 298, 299, 817,
	817, 28, 546, 0, 0, 534, 30, 0, 302, 307,
	308, 312, 310, 311, 303, 0, 320, 324, 0, 381,
	0, 386, 388, -2, -2, 0, 423, 424, 425, 426,
	427, 0, 0, 0, 0, 0, 0, 0, 0, 451,
	452, 453, 454, 519, 520, 521, 522, 523, 524, 525,
	526, 390, 391, 516, 566, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 507, 0, 481, 481, 481, 481,
	481, 481, 481, 481, 0, 0, 0, 0, 0, 0,
	331, 333, 334, 335, 354, 0, 356, 0, 0, 42,
	46, 0, 794, 570, -2, -2, 0, 0, 611, 612,
	-2, 718, -2, 617, 618, 619, 620, 621, 622, 623,
	624, 625, 626, 627, 628, 629, 630, 631, 632, 633,
	634, 635, 636, 637, 638, 639, 640, 641, 642, 643,
	644, 645, 646, 647, 648, 649, 650, 651, 652, 653,
	654, 655, 656, 657, 658, 659, 660, 661, 662, 663,
	664, 665, 666, 667, 668, 669, 670, 671, 672, 673,
	674, 675, 676, 677, 678, 679, 680, 681, 682, 683,
	684, 685, 686, 687, 688, 689, 690, 691, 692, 693,
	694, 695, 696, 697, 698, 699, 700, 701, 702, 703,
	704, 705, 706, 707, 708, 709, 0, 0, 81, 0,
	79, 0, 818, 0, 69, 0, 0, 0, 0, 0,
	818, 0, 0, 0, 0, 0, 0, 0, 246, 0,
	248, 818, 818, 818, 818, 818, 818, 818, 818, 257,
	819, 820, 258, 259, 260, 818, 818, 262, 0, 280,
	276, 277, 0, 0, 275, 300, 301, 29, 816, 23,
	0, 0, 543, 0, 535, 536, 539, 542, 28, 309,
	0, 314, 313, 305, 0, 321, 0, 0, 0, 325,
	0, 327, 328, 0, 384, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 408, 409, 410, 411, 412, 413,
	414, 387, 0, 401, 0, 0, 0, 443, 444, 445,
	446, 447, 448, 449, 0, 316, 28, 0, 421, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 508,
	0, 473, 0, 474, 475, 476, 477, 478, 479, 480,
	0, 316, 0, 0, 44, 0, 372, 0, 0, 0,
	0, 0, 0, 361, 0, 0, 364, 0, 0, 0,
	0, 355, 0, 0, 375, 765, 357, 0, 359, 360,
	-2, 0, 0, 0, 40, 41, 0, 47, 794, 49,
	50, 0, 0, 0, 162, 578, 579, 580, 576, 206,
	0, 0, 145, 141, 87, 88, 89, 134, 91, 134,
	134, 134, 134, 159, 159, 159, 159, 117, 118, 119,
	120, 121, 0, 0, 104, 134, 134, 134, 108, 124,
	125, 126, 127, 128, 129, 130, 131, 92, 93, 94,
	95, 96, 97, 98, 136, 136, 136, 138, 138, 607,
	64, 0, 72, 0, 818, 0, 818, 77, 0, 222,
	0, 241, 584, 0, 818, 244, 245, 374, 615, 616,
	249, 250, 251, 252, 253, 254, 255, 256, 261, 265,
	0, 283, 0, 0, 269, 268, 547, 0, 0, 0,
	0, 0, 538, 540, 541, 546, 31, 312, 0, 527,
	0, 0, 0, 315, 26, 382, 383, 385, 402, 0,
	404, 406, 326, 322, 0, 517, -2, 392, 393, 417,
	418, 419, 0, 0, 0, 0, 415, 397, 0, 428,
	429, 430, 431, 432, 433, 434, 435, 436, 437, 438,
	439, 442, 492, 493, 0, 440, 441, 450, 0, 0,
	317, 318, 420, 0, 565, 28, 0, 0, 0, 0,
	0, 516, 0, 0, 0, 0, 514, 511, 0, 0,
	482, 0, 0, 0, 0, 0, 0, 371, 379, 567,
	0, 332, 350, 352, 0, 347, 362, 363, 365, 0,
	367, 0, 369, 370, 336, 337, 338, 0, 0, 0,
	0, 358, 379, 0, 379, 43, 571, 48, 0, 0,
	53, 54, 572, 573, 574, 0, 78, 207, 209, 212,
	213, 214, 82, 83, 84, 0, 0, 194, 0, 0,
	182, 182, 0, 188, 189, 80, 148, 146, 0, 143,
	142, 90, 0, 159, 159, 111, 112, 162, 0, 162,
	162, 162, 0, 0, 105, 106, 107, 99, 0, 100,
	101, 102, 0, 103, 0, 0, 818, 66, 0, 70,
	71, 67, 586, 68, 817, 0, 0, 599, 223, 589,
	590, 591, 592, 593, 594, 595, 596, 597, 598, 0,
	240, 818, 243, 280, 264, 0, 0, 281, 282, 0,
	544, 545, 0, 537, 24, 0, 581, 582, 528, 529,
	329, 403, 405, 407, 0, 316, 394, 415, 398, 0,
	395, 0, 0, 389, 455, 0, 0, 422, -2, 458,
	459, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	534, 0, 512, 0, 0, 472, 483, 484, 485, 486,
	559, 0, 0, -2, 0, 0, 534, 0, 0, 0,
	344, 351, 0, 0, 345, 0, 346, 366, 368, 0,
	0, 0, 0, 342, 534, 379, 39, 51, 52, 0,
	0, 58, 163, 164, 0, 210, 0, 0, 0, 183,
	182, 182, 186, 181, 187, 0, 155, 0, 147, 86,
	144, 0, 162, 162, 113, 0, 114, 115, 116, 0,
	132, 0, 0, 0, 0, 608, 65, 73, 74, 0,
	215, 817, 0, 224, 225, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 817, 0, 0, 817, 600, 601,
	602, 603, 0, 242, 283, 284, 285, 548, 0, 25,
	379, 0, 323, 518, 0, 396, 0, 416, 399, 456,
	319, 0, 134, 134, 497, 134, 138, 500, 134, 502,
	134, 505, 0, 0, 0, 0, 517, 0, 0, 0,
	509, 471, 515, 0, 32, 0, 559, 549, 561, 563,
	0, 28, 0, 555, 0, 542, 568, 380, 569, 348,
	0, 353, 0, 0, 0, 356, 0, 542, 38, 55,
	56, 57, 208, 211, 0, 190, 134, 193, 184, 185,
	0, 157, 0, 149, 150, 151, 152, 153, 154, 135,
	109, 110, 160, 161, 159, 0, 159, 0, 139, 0,
	818, 0, 0, 216, 0, 217, 219, 220, 221, 0,
	263, 530, 330, 457, 400, 460, 494, 159, 498, 499,
	501, 503, 504, 506, 462, 461, 463, 0, 0, 466,
	0, 0, 0, 0, 0, 513, 0, 33, 0, 564,
	-2, 0, 0, 0, 45, 36, 0, 340, 0, 0,
	0, 375, 343, 37, 173, 0, 192, 0, 165, 158,
	0, 162, 133, 162, 0, 0, 63, 75, 76, 0,
	0, 532, 0, 495, 496, 0, 0, 0, 0, 487,
	470, 510, 0, 562, 0, -2, 0, 557, 556, 0,
	349, 376, 377, 378, 339, 172, 174, 0, 179, 0,
	191, 0, 170, 0, 167, 169, 156, 122, 123, 137,
	140, 0, 0, 27, 0, 0, 464, 465, 467, 468,
	0, 0, 0, 0, 552, 28, 0, 341, 175, 176,
	0, 180, 178, 0, 85, 0, 166, 168, 69, 0,
	236, 0, 533, 531, 469, 0, 0, 0, 560, -2,
	558, 177, 0, 171, 72, 235, 0, 0, 488, 0,
	491, 0, 218, 237, 0, 489, 0, 0, 0, 195,
	0, 0, 196, 197, 0, 0, 490, 198, 0, 0,
	0, 0, 0, 199, 201, 202, 0, 0, 200, 238,
	239, 203, 204, 205,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 74, 3, 3, 3, 101, 93, 3,
	54, 56, 98, 96, 55, 97, 111, 99, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 259,
	82, 81, 83, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 103, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 92, 3, 104,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 75,
	76, 77, 78, 79, 80, 84, 85, 86, 87, 88,
	89, 90, 91, 94, 95, 100, 102, 105, 106, 107,
	108, 109, 110, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:313
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:318
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:319
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:323
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:344
		{
			setParseTree(yylex, nil)
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:350
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:358
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 25:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:362
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 26:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:368
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 27:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:375
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:381
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:385
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:391
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:395
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:402
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 33:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:414
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:426
		{
			yyVAL.str = InsertStr
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:430
		{
			yyVAL.str = ReplaceStr
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:436
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:442
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:446
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:450
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:455
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:456
		{
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:460
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:464
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 44:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:469
		{
			yyVAL.partitions = nil
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:473
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:479
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:483
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:487
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:491
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:497
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:501
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:507
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:511
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:515
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:521
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:525
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:529
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:533
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:539
		{
			yyVAL.str = SessionStr
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:543
		{
			yyVAL.str = GlobalStr
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:549
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:554
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 63:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:560
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:565
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 65:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:569
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:573
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:581
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:585
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:590
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:594
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:600
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:605
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:610
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:616
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:621
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:627
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:633
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:640
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:647
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:651
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:657
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:662
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:666
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:670
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 85:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:676
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:687
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:698
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:703
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:709
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:713
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:717
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:721
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:725
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:729
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:733
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:739
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:745
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:751
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:757
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:763
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:771
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:775
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:779
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:783
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:787
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:793
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 110:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:797
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:801
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:805
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:809
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:813
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:817
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:821
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:825
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:829
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:833
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:837
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:841
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:845
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 123:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:850
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:856
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:860
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:864
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:868
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:872
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:876
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:880
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:884
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:890
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:895
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:900
		{
			yyVAL.optVal = nil
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:904
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:909
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 137:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:913
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:921
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:925
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 140:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:931
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:939
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:943
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:948
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:952
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:958
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:962
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:966
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:971
		{
			yyVAL.optVal = nil
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:975
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:979
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:983
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:987
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:991
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:995
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1000
		{
			yyVAL.optVal = nil
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1004
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1009
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1013
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1018
		{
			yyVAL.str = ""
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1022
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1026
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1031
		{
			yyVAL.str = ""
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1035
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1039
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1044
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1048
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1052
		{
			yyVAL.colKeyOpt = colKey
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1056
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1060
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1065
		{
			yyVAL.optVal = nil
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1069
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1075
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 173:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1079
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1085
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1089
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1095
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1099
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1104
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1110
		{
			yyVAL.str = ""
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1114
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1120
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1124
		{
			yyVAL.str = ""
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1130
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1134
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1138
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1142
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1146
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1152
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1156
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1162
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1166
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1172
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1178
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1182
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 195:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1189
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 196:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1193
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 197:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1197
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 198:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1201
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1207
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1213
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1219
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1223
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1227
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1231
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1235
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 206:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1240
		{
			yyVAL.str = ""
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1244
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1248
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1256
		{
			yyVAL.str = yyDollar[1].str
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1260
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1264
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1270
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1274
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1278
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 215:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1284
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 216:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1288
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 217:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1292
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 218:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1296
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 219:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1309
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 220:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1319
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 221:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1324
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 222:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1329
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 223:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1333
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 235:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1352
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1358
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1362
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 238:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1368
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 239:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1372
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 240:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1378
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1384
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 242:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1392
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 243:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1397
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1405
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1409
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1415
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1419
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1424
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1430
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1434
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1438
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1443
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1447
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1451
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1455
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1459
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1463
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1467
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1471
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1475
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1479
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1483
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1487
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 264:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1492
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1502
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1506
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1510
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1514
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &yyDollar[4].expr}
		}
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1518
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1522
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1526
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1530
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1534
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1538
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1548
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1554
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1558
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 278:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1564
		{
			yyVAL.str = ""
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1568
		{
			yyVAL.str = "full "
		}
	case 280:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1574
		{
			yyVAL.str = ""
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1578
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1582
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 283:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1588
		{
			yyVAL.showFilter = nil
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1592
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1596
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 286:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1602
		{
			yyVAL.str = ""
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1606
		{
			yyVAL.str = SessionStr
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1610
		{
			yyVAL.str = GlobalStr
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1616
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1620
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1626
		{
			yyVAL.statement = &Begin{}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1630
		{
			yyVAL.statement = &Begin{}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1636
		{
			yyVAL.statement = &Commit{}
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1642
		{
			yyVAL.statement = &Rollback{}
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1648
		{
			yyVAL.statement = &OtherRead{}
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1652
		{
			yyVAL.statement = &OtherRead{}
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1656
		{
			yyVAL.statement = &OtherRead{}
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1660
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1664
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1668
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1672
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1677
		{
			setAllowComments(yylex, true)
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1681
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1687
		{
			yyVAL.bytes2 = nil
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1691
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1697
		{
			yyVAL.str = UnionStr
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1701
		{
			yyVAL.str = UnionAllStr
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1705
		{
			yyVAL.str = UnionDistinctStr
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1710
		{
			yyVAL.str = ""
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1714
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1718
		{
			yyVAL.str = SQLCacheStr
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1723
		{
			yyVAL.str = ""
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1727
		{
			yyVAL.str = DistinctStr
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1732
		{
			yyVAL.str = ""
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1736
		{
			yyVAL.str = StraightJoinHint
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1741
		{
			yyVAL.selectExprs = nil
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1745
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1751
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1755
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1761
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1765
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1769
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 323:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1773
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1778
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1782
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1786
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1793
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1798
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1802
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1808
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1812
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1822
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1826
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1830
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1836
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 339:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1840
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1846
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1850
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1856
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1860
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 344:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1873
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 345:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1877
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 346:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1881
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1885
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1891
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 349:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1893
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1897
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1899
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1903
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1905
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1908
		{
			yyVAL.empty = struct{}{}
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1910
		{
			yyVAL.empty = struct{}{}
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1913
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1917
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1921
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1928
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1934
		{
			yyVAL.str = JoinStr
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1938
		{
			yyVAL.str = JoinStr
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1942
		{
			yyVAL.str = JoinStr
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1948
		{
			yyVAL.str = StraightJoinStr
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1954
		{
			yyVAL.str = LeftJoinStr
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1958
		{
			yyVAL.str = LeftJoinStr
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1962
		{
			yyVAL.str = RightJoinStr
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1966
		{
			yyVAL.str = RightJoinStr
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1972
		{
			yyVAL.str = NaturalJoinStr
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1976
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1986
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1990
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1996
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2000
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2005
		{
			yyVAL.indexHints = nil
		}
	case 376:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2009
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 377:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2013
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 378:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2017
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2022
		{
			yyVAL.expr = nil
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2026
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2032
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2036
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2040
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2044
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2048
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2052
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2056
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 388:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2062
		{
			yyVAL.str = ""
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2066
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2072
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2076
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2082
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2086
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 394:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2090
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 395:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2094
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 396:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2098
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2102
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 398:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2106
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 399:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2110
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 400:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2114
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2118
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2124
		{
			yyVAL.str = IsNullStr
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2128
		{
			yyVAL.str = IsNotNullStr
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2132
		{
			yyVAL.str = IsTrueStr
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2136
		{
			yyVAL.str = IsNotTrueStr
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2140
		{
			yyVAL.str = IsFalseStr
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2144
		{
			yyVAL.str = IsNotFalseStr
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2150
		{
			yyVAL.str = EqualStr
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2154
		{
			yyVAL.str = LessThanStr
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2158
		{
			yyVAL.str = GreaterThanStr
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2162
		{
			yyVAL.str = LessEqualStr
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2166
		{
			yyVAL.str = GreaterEqualStr
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2170
		{
			yyVAL.str = NotEqualStr
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2174
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 415:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2179
		{
			yyVAL.expr = nil
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2183
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2189
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2193
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2197
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2203
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2209
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2213
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2219
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2223
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2227
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2231
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2235
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2239
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2243
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2247
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2251
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2255
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2259
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2263
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2267
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2271
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2275
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2279
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2283
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2287
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2291
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2295
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2299
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2303
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2307
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2311
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2319
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2333
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2337
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2341
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 455:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2359
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 456:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2363
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 457:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2367
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 458:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2377
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 459:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2381
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 460:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2385
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 461:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2389
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 462:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2393
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 463:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2397
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 464:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2401
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 465:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2405
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 466:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2409
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 467:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2413
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 468:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2417
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 469:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2421
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 470:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2425
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 471:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2429
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2433
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2443
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2447
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2451
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2455
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2460
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2465
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2470
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2475
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 483:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2489
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 484:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2493
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 485:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2497
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 486:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2501
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 487:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2507
		{
			yyVAL.str = ""
		}
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2511
		{
			yyVAL.str = BooleanModeStr
		}
	case 489:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2515
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 490:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2519
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2523
		{
			yyVAL.str = QueryExpansionStr
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2529
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2533
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2539
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2543
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2547
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2551
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2555
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2559
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2565
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2569
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2573
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2577
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2581
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2585
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2589
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 507:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2594
		{
			yyVAL.expr = nil
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2598
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 509:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2603
		{
			yyVAL.str = string("")
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2607
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2613
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2617
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 513:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2623
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2628
		{
			yyVAL.expr = nil
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2632
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2638
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2642
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 518:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2646
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2652
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2656
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2660
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2664
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2668
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2672
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2676
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2680
		{
			yyVAL.expr = &NullVal{}
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2686
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2695
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2699
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 530:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2704
		{
			yyVAL.exprs = nil
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2708
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 532:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2713
		{
			yyVAL.expr = nil
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2717
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 534:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2722
		{
			yyVAL.orderBy = nil
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2726
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2732
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2736
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2742
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 539:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2747
		{
			yyVAL.str = AscScr
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2751
		{
			yyVAL.str = AscScr
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2755
		{
			yyVAL.str = DescScr
		}
	case 542:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2760
		{
			yyVAL.limit = nil
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2764
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 544:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2768
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 545:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2772
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 546:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2777
		{
			yyVAL.str = ""
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2781
		{
			yyVAL.str = ForUpdateStr
		}
	case 548:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2785
		{
			yyVAL.str = ShareModeStr
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2798
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2802
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2806
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 552:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2811
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 553:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2815
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 554:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2819
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2826
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2830
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2834
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 558:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2838
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 559:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2843
		{
			yyVAL.updateExprs = nil
		}
	case 560:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2847
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2853
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2857
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2863
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2867
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2873
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2879
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2889
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2893
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2899
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2905
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2909
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2915
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2919
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2923
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2930
		{
			yyVAL.bytes = []byte("charset")
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2937
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2941
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2945
		{
			yyVAL.expr = &Default{}
		}
	case 583:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2954
		{
			yyVAL.byt = 0
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2956
		{
			yyVAL.byt = 1
		}
	case 585:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2959
		{
			yyVAL.empty = struct{}{}
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2961
		{
			yyVAL.empty = struct{}{}
		}
	case 587:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2964
		{
			yyVAL.str = ""
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2966
		{
			yyVAL.str = IgnoreStr
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2970
		{
			yyVAL.empty = struct{}{}
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2972
		{
			yyVAL.empty = struct{}{}
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2974
		{
			yyVAL.empty = struct{}{}
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2976
		{
			yyVAL.empty = struct{}{}
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2978
		{
			yyVAL.empty = struct{}{}
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2980
		{
			yyVAL.empty = struct{}{}
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2982
		{
			yyVAL.empty = struct{}{}
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2984
		{
			yyVAL.empty = struct{}{}
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2986
		{
			yyVAL.empty = struct{}{}
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2988
		{
			yyVAL.empty = struct{}{}
		}
	case 599:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2991
		{
			yyVAL.empty = struct{}{}
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2993
		{
			yyVAL.empty = struct{}{}
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2995
		{
			yyVAL.empty = struct{}{}
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2999
		{
			yyVAL.empty = struct{}{}
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3001
		{
			yyVAL.empty = struct{}{}
		}
	case 604:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3004
		{
			yyVAL.empty = struct{}{}
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3006
		{
			yyVAL.empty = struct{}{}
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3008
		{
			yyVAL.empty = struct{}{}
		}
	case 607:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3011
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:3013
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3017
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3021
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3028
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3034
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3038
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3045
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3269
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3278
		{
			decNesting(yylex)
		}
	case 817:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3283
		{
			forceEOF(yylex)
		}
	case 818:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3288
		{
			forceEOF(yylex)
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3292
		{
			forceEOF(yylex)
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3296
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
